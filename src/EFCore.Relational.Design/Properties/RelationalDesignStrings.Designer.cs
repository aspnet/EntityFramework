// <auto-generated />

using System;
using System.Reflection;
using System.Resources;
using JetBrains.Annotations;
using Microsoft.EntityFrameworkCore.Diagnostics;
using Microsoft.Extensions.Logging;

namespace Microsoft.EntityFrameworkCore.Internal
{
    /// <summary>
    ///		This API supports the Entity Framework Core infrastructure and is not intended to be used
    ///     directly from your code. This API may change or be removed in future releases.
    /// </summary>
    public static class RelationalDesignStrings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.EntityFrameworkCore.Properties.RelationalDesignStrings", typeof(RelationalDesignStrings).GetTypeInfo().Assembly);

        /// <summary>
        ///     Metadata model returned should not be null. Provider: {providerTypeName}.
        /// </summary>
        public static string ProviderReturnedNullModel([CanBeNull] object providerTypeName)
            => string.Format(
                GetString("ProviderReturnedNullModel", nameof(providerTypeName)),
                providerTypeName);

        /// <summary>
        ///     No files generated in directory {outputDirectoryName}. The following file(s) already exist and must be made writeable to continue: {readOnlyFiles}.
        /// </summary>
        public static string ReadOnlyFiles([CanBeNull] object outputDirectoryName, [CanBeNull] object readOnlyFiles)
            => string.Format(
                GetString("ReadOnlyFiles", nameof(outputDirectoryName), nameof(readOnlyFiles)),
                outputDirectoryName, readOnlyFiles);

        /// <summary>
        ///     The following file(s) already exist in directory {outputDirectoryName}: {existingFiles}. Use the Force flag to overwrite these files.
        /// </summary>
        public static string ExistingFiles([CanBeNull] object outputDirectoryName, [CanBeNull] object existingFiles)
            => string.Format(
                GetString("ExistingFiles", nameof(outputDirectoryName), nameof(existingFiles)),
                outputDirectoryName, existingFiles);

        /// <summary>
        ///     Found a column on index {indexName} on table {tableName} with an empty or null name. Not including column in index.
        /// </summary>
        public static readonly EventDefinition<string, string> LogColumnNameEmptyOnIndex
            = new EventDefinition<string, string>(
                RelationalDesignEventId.IndexColumnNotNamedWarning,
                LogLevel.Warning,
                LoggerMessage.Define<string, string>(
                    LogLevel.Warning,
                    RelationalDesignEventId.IndexColumnNotNamedWarning,
                    _resourceManager.GetString("LogColumnNameEmptyOnIndex")));

        /// <summary>
        ///     For foreign key with identity {id} on table {tableName}, unable to find the column called {principalColumnName} on the foreign key's principal table, {principaltableName}. Skipping foreign key.
        /// </summary>
        public static readonly EventDefinition<string, string, string, string> LogPrincipalColumnNotFound
            = new EventDefinition<string, string, string, string>(
                RelationalDesignEventId.ForeignKeyPrincipalColumnMissingWarning,
                LogLevel.Warning,
                LoggerMessage.Define<string, string, string, string>(
                    LogLevel.Warning,
                    RelationalDesignEventId.ForeignKeyPrincipalColumnMissingWarning,
                    _resourceManager.GetString("LogPrincipalColumnNotFound")));

        /// <summary>
        ///     Could not find type mapping for column '{columnName}' with data type '{dateType}'. Skipping column.
        /// </summary>
        public static readonly EventDefinition<string, string> LogCannotFindTypeMappingForColumn
            = new EventDefinition<string, string>(
                RelationalDesignEventId.ColumnTypeNotMappedWarning,
                LogLevel.Warning,
                LoggerMessage.Define<string, string>(
                    LogLevel.Warning,
                    RelationalDesignEventId.ColumnTypeNotMappedWarning,
                    _resourceManager.GetString("LogCannotFindTypeMappingForColumn")));

        /// <summary>
        ///     Could not scaffold the foreign key '{foreignKeyName}'. A key for '{columnsList}' was not found in the principal entity type '{principalEntityType}'.
        /// </summary>
        public static readonly EventDefinition<string, string, string> LogForeignKeyScaffoldErrorPrincipalKeyNotFound
            = new EventDefinition<string, string, string>(
                RelationalDesignEventId.ForeignKeyReferencesMissingPrincipalKeyWarning,
                LogLevel.Warning,
                LoggerMessage.Define<string, string, string>(
                    LogLevel.Warning,
                    RelationalDesignEventId.ForeignKeyReferencesMissingPrincipalKeyWarning,
                    _resourceManager.GetString("LogForeignKeyScaffoldErrorPrincipalKeyNotFound")));

        /// <summary>
        ///     Could not scaffold the foreign key '{foreignKeyName}'. The referenced table could not be found. This most likely occurred because the referenced table was excluded from scaffolding.
        /// </summary>
        public static readonly EventDefinition<string> LogForeignKeyScaffoldErrorPrincipalTableNotFound
            = new EventDefinition<string>(
                RelationalDesignEventId.ForeignKeyReferencesMissingTableWarning,
                LogLevel.Warning,
                LoggerMessage.Define<string>(
                    LogLevel.Warning,
                    RelationalDesignEventId.ForeignKeyReferencesMissingTableWarning,
                    _resourceManager.GetString("LogForeignKeyScaffoldErrorPrincipalTableNotFound")));

        /// <summary>
        ///     Could not scaffold the foreign key '{foreignKeyName}'. The referenced table '{principaltableName}' could not be scaffolded.
        /// </summary>
        public static readonly EventDefinition<string, string> LogForeignKeyScaffoldErrorPrincipalTableScaffoldingError
            = new EventDefinition<string, string>(
                RelationalDesignEventId.ForeignKeyReferencesNotMappedTableWarning,
                LogLevel.Warning,
                LoggerMessage.Define<string, string>(
                    LogLevel.Warning,
                    RelationalDesignEventId.ForeignKeyReferencesNotMappedTableWarning,
                    _resourceManager.GetString("LogForeignKeyScaffoldErrorPrincipalTableScaffoldingError")));

        /// <summary>
        ///     Could not scaffold the foreign key '{foreignKeyName}'.  The following columns in the foreign key could not be scaffolded: {columnNames}.
        /// </summary>
        public static readonly EventDefinition<string, string> LogForeignKeyScaffoldErrorPropertyNotFound
            = new EventDefinition<string, string>(
                RelationalDesignEventId.ForeignKeyColumnsNotMappedWarning,
                LogLevel.Warning,
                LoggerMessage.Define<string, string>(
                    LogLevel.Warning,
                    RelationalDesignEventId.ForeignKeyColumnsNotMappedWarning,
                    _resourceManager.GetString("LogForeignKeyScaffoldErrorPropertyNotFound")));

        /// <summary>
        ///     Could not scaffold the primary key for '{tableName}'. The following columns in the primary key could not be scaffolded: {columnNames}.
        /// </summary>
        public static readonly EventDefinition<string, string> LogPrimaryKeyErrorPropertyNotFound
            = new EventDefinition<string, string>(
                RelationalDesignEventId.PrimaryKeyColumnsNotMappedWarning,
                LogLevel.Warning,
                LoggerMessage.Define<string, string>(
                    LogLevel.Warning,
                    RelationalDesignEventId.PrimaryKeyColumnsNotMappedWarning,
                    _resourceManager.GetString("LogPrimaryKeyErrorPropertyNotFound")));

        /// <summary>
        ///     Unable to identify the primary key for table '{tableName}'.
        /// </summary>
        public static readonly EventDefinition<string> LogMissingPrimaryKey
            = new EventDefinition<string>(
                RelationalDesignEventId.MissingPrimaryKeyWarning,
                LogLevel.Warning,
                LoggerMessage.Define<string>(
                    LogLevel.Warning,
                    RelationalDesignEventId.MissingPrimaryKeyWarning,
                    _resourceManager.GetString("LogMissingPrimaryKey")));

        /// <summary>
        ///     Found table with name: {name}.
        /// </summary>
        public static readonly EventDefinition<string> LogFoundTable
            = new EventDefinition<string>(
                RelationalDesignEventId.TableFound,
                LogLevel.Debug,
                LoggerMessage.Define<string>(
                    LogLevel.Debug,
                    RelationalDesignEventId.TableFound,
                    _resourceManager.GetString("LogFoundTable")));

        /// <summary>
        ///     Table {tableName} is not included in the selection set. Skipping.
        /// </summary>
        public static readonly EventDefinition<string> LogTableNotInSelectionSet
            = new EventDefinition<string>(
                RelationalDesignEventId.TableSkipped,
                LogLevel.Debug,
                LoggerMessage.Define<string>(
                    LogLevel.Debug,
                    RelationalDesignEventId.TableSkipped,
                    _resourceManager.GetString("LogTableNotInSelectionSet")));

        /// <summary>
        ///     Column {columnName} belongs to table {tableName} which is not included in the selection set. Skipping.
        /// </summary>
        public static readonly EventDefinition<string, string> LogColumnNotInSelectionSet
            = new EventDefinition<string, string>(
                RelationalDesignEventId.ColumnSkipped,
                LogLevel.Debug,
                LoggerMessage.Define<string, string>(
                    LogLevel.Debug,
                    RelationalDesignEventId.ColumnSkipped,
                    _resourceManager.GetString("LogColumnNotInSelectionSet")));

        /// <summary>
        ///     Found index with name: {indexName}, table: {tableName}, is unique: {isUnique}.
        /// </summary>
        public static readonly EventDefinition<string, string, bool?> LogFoundIndex
            = new EventDefinition<string, string, bool?>(
                RelationalDesignEventId.IndexFound,
                LogLevel.Debug,
                LoggerMessage.Define<string, string, bool?>(
                    LogLevel.Debug,
                    RelationalDesignEventId.IndexFound,
                    _resourceManager.GetString("LogFoundIndex")));

        /// <summary>
        ///     Found index column on index {indexName} on table {tableName}, column name: {columnName}, ordinal: {ordinal}.
        /// </summary>
        public static readonly EventDefinition<string, string, string, int?> LogFoundIndexColumn
            = new EventDefinition<string, string, string, int?>(
                RelationalDesignEventId.IndexColumnFound,
                LogLevel.Debug,
                LoggerMessage.Define<string, string, string, int?>(
                    LogLevel.Debug,
                    RelationalDesignEventId.IndexColumnFound,
                    _resourceManager.GetString("LogFoundIndexColumn")));

        /// <summary>
        ///     Index column {columnName} belongs to index {indexName} on table {tableName} which is not included in the selection set. Skipping.
        /// </summary>
        public static readonly EventDefinition<string, string, string> LogIndexColumnNotInSelectionSet
            = new EventDefinition<string, string, string>(
                RelationalDesignEventId.IndexColumnSkipped,
                LogLevel.Warning,
                LoggerMessage.Define<string, string, string>(
                    LogLevel.Warning,
                    RelationalDesignEventId.IndexColumnSkipped,
                    _resourceManager.GetString("LogIndexColumnNotInSelectionSet")));

        /// <summary>
        ///     Found sequence name: {name}, data type: {dataType}, cyclic: {isCyclic}, increment: {increment}, start: {start}, minimum: {min}, maximum: {max}.
        /// </summary>
        public static readonly FallbackEventDefinition LogFoundSequence
            = new FallbackEventDefinition(
                RelationalDesignEventId.SequenceFound,
                LogLevel.Debug,
                _resourceManager.GetString("LogFoundSequence"));

        /// <summary>
        ///     Found a column on foreign key {tableName}.{fkName} with an empty or null name. Not including column in foreign key
        /// </summary>
        public static readonly EventDefinition<string, string> LogColumnNameEmptyOnForeignKey
            = new EventDefinition<string, string>(
                RelationalDesignEventId.ForeignKeyColumnNotNamedWarning,
                LogLevel.Warning,
                LoggerMessage.Define<string, string>(
                    LogLevel.Warning,
                    RelationalDesignEventId.ForeignKeyColumnNotNamedWarning,
                    _resourceManager.GetString("LogColumnNameEmptyOnForeignKey")));

        /// <summary>
        ///     Found a column on table {tableName} with an empty or null name. Skipping column.
        /// </summary>
        public static readonly EventDefinition<string> LogColumnNameEmptyOnTable
            = new EventDefinition<string>(
                RelationalDesignEventId.ColumnNotNamedWarning,
                LogLevel.Warning,
                LoggerMessage.Define<string>(
                    LogLevel.Warning,
                    RelationalDesignEventId.ColumnNotNamedWarning,
                    _resourceManager.GetString("LogColumnNameEmptyOnTable")));

        /// <summary>
        ///     For index {indexName}. Unable to find parent table {tableName}. Skipping index.
        /// </summary>
        public static readonly EventDefinition<string, string> LogUnableToFindTableForIndex
            = new EventDefinition<string, string>(
                RelationalDesignEventId.IndexTableMissingWarning,
                LogLevel.Warning,
                LoggerMessage.Define<string, string>(
                    LogLevel.Warning,
                    RelationalDesignEventId.IndexTableMissingWarning,
                    _resourceManager.GetString("LogUnableToFindTableForIndex")));

        /// <summary>
        ///     Found an index on table {tableName} with an empty or null name. Skipping index.
        /// </summary>
        public static readonly EventDefinition<string> LogIndexNameEmpty
            = new EventDefinition<string>(
                RelationalDesignEventId.IndexNotNamedWarning,
                LogLevel.Warning,
                LoggerMessage.Define<string>(
                    LogLevel.Warning,
                    RelationalDesignEventId.IndexNotNamedWarning,
                    _resourceManager.GetString("LogIndexNameEmpty")));

        /// <summary>
        ///     Found a foreign key on table {tableName} with an empty or null name. Skipping foreign key.
        /// </summary>
        public static readonly EventDefinition<string> LogForeignKeyNameEmpty
            = new EventDefinition<string>(
                RelationalDesignEventId.ForeignKeyNotNamedWarning,
                LogLevel.Warning,
                LoggerMessage.Define<string>(
                    LogLevel.Warning,
                    RelationalDesignEventId.ForeignKeyNotNamedWarning,
                    _resourceManager.GetString("LogForeignKeyNameEmpty")));

        /// <summary>
        ///     Foreign key column {columnName} belongs to foreign key {fkName} on table {tableName} which is not included in the selection set. Skipping.
        /// </summary>
        public static readonly EventDefinition<string, string, string> LogForeignKeyColumnNotInSelectionSet
            = new EventDefinition<string, string, string>(
                RelationalDesignEventId.ForeignKeyColumnMissingWarning,
                LogLevel.Warning,
                LoggerMessage.Define<string, string, string>(
                    LogLevel.Warning,
                    RelationalDesignEventId.ForeignKeyColumnMissingWarning,
                    _resourceManager.GetString("LogForeignKeyColumnNotInSelectionSet")));

        /// <summary>
        ///     For foreign key {fkName} on table {tableName}, unable to model the end of the foreign key on principal table {principaltableName}. This is usually because the principal table was not included in the selection set.
        /// </summary>
        public static readonly EventDefinition<string, string, string> LogPrincipalTableNotInSelectionSet
            = new EventDefinition<string, string, string>(
                RelationalDesignEventId.ForeignKeyReferencesMissingPrincipalTableWarning,
                LogLevel.Warning,
                LoggerMessage.Define<string, string, string>(
                    LogLevel.Warning,
                    RelationalDesignEventId.ForeignKeyReferencesMissingPrincipalTableWarning,
                    _resourceManager.GetString("LogPrincipalTableNotInSelectionSet")));

        /// <summary>
        ///     Unable to generate entity type for table '{tableName}'.
        /// </summary>
        public static readonly EventDefinition<string> LogUnableToGenerateEntityType
            = new EventDefinition<string>(
                RelationalDesignEventId.UnableToGenerateEntityTypeWarning,
                LogLevel.Warning,
                LoggerMessage.Define<string>(
                    LogLevel.Warning,
                    RelationalDesignEventId.UnableToGenerateEntityTypeWarning,
                    _resourceManager.GetString("LogUnableToGenerateEntityType")));

        /// <summary>
        ///     Unable to scaffold the index '{indexName}'. The following columns could not be scaffolded: {columnNames}.
        /// </summary>
        public static readonly EventDefinition<string, string> LogUnableToScaffoldIndexMissingProperty
            = new EventDefinition<string, string>(
                RelationalDesignEventId.IndexColumnsNotMappedWarning,
                LogLevel.Warning,
                LoggerMessage.Define<string, string>(
                    LogLevel.Warning,
                    RelationalDesignEventId.IndexColumnsNotMappedWarning,
                    _resourceManager.GetString("LogUnableToScaffoldIndexMissingProperty")));

        /// <summary>
        ///     Sequence name cannot be null or empty. Entity Framework cannot model a sequence that does not have a name.
        /// </summary>
        public static readonly EventDefinition LogSequencesRequireName
            = new EventDefinition(
                RelationalDesignEventId.SequenceNotNamedWarning,
                LogLevel.Warning,
                LoggerMessage.Define(
                    LogLevel.Warning,
                    RelationalDesignEventId.SequenceNotNamedWarning,
                    _resourceManager.GetString("LogSequencesRequireName")));

        /// <summary>
        ///     For sequence '{sequenceName}'. Unable to scaffold because it uses an unsupported type: '{typeName}'.
        /// </summary>
        public static readonly EventDefinition<string, string> LogBadSequenceType
            = new EventDefinition<string, string>(
                RelationalDesignEventId.SequenceTypeNotSupportedWarning,
                LogLevel.Warning,
                LoggerMessage.Define<string, string>(
                    LogLevel.Warning,
                    RelationalDesignEventId.SequenceTypeNotSupportedWarning,
                    _resourceManager.GetString("LogBadSequenceType")));

        /// <summary>
        ///     Unable to find a schema in the database matching the selected schema {schema}.
        /// </summary>
        public static readonly EventDefinition<string> LogMissingSchema
            = new EventDefinition<string>(
                RelationalDesignEventId.MissingSchemaWarning,
                LogLevel.Warning,
                LoggerMessage.Define<string>(
                    LogLevel.Warning,
                    RelationalDesignEventId.MissingSchemaWarning,
                    _resourceManager.GetString("LogMissingSchema")));

        /// <summary>
        ///     Unable to find a table in the database matching the selected table {table}.
        /// </summary>
        public static readonly EventDefinition<string> LogMissingTable
            = new EventDefinition<string>(
                RelationalDesignEventId.MissingTableWarning,
                LogLevel.Warning,
                LoggerMessage.Define<string>(
                    LogLevel.Warning,
                    RelationalDesignEventId.MissingTableWarning,
                    _resourceManager.GetString("LogMissingTable")));

        /// <summary>
        ///     The principal end of the foreign key '{foreignKeyName}' is supported by the unique index '{indexName}' and contains the following nullable columns '{columnNames}'. Entity Framework requires the properties representing those columns to be non-nullable.
        /// </summary>
        public static readonly EventDefinition<string, string, string> LogForeignKeyPrincipalEndContainsNullableColumns
            = new EventDefinition<string, string, string>(
                RelationalDesignEventId.ForeignKeyPrincipalEndContainsNullableColumnsWarning,
                LogLevel.Warning,
                LoggerMessage.Define<string, string, string>(
                    LogLevel.Warning,
                    RelationalDesignEventId.ForeignKeyPrincipalEndContainsNullableColumnsWarning,
                    _resourceManager.GetString("LogForeignKeyPrincipalEndContainsNullableColumns")));

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);
            for (var i = 0; i < formatterNames.Length; i++)
            {
                value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
            }

            return value;
        }
    }
}
