<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ProviderReturnedNullModel" xml:space="preserve">
    <value>Metadata model returned should not be null. Provider: {providerTypeName}.</value>
  </data>
  <data name="ReadOnlyFiles" xml:space="preserve">
    <value>No files generated in directory {outputDirectoryName}. The following file(s) already exist and must be made writeable to continue: {readOnlyFiles}.</value>
  </data>
  <data name="ExistingFiles" xml:space="preserve">
    <value>The following file(s) already exist in directory {outputDirectoryName}: {existingFiles}. Use the Force flag to overwrite these files.</value>
  </data>
  <data name="LogColumnNameEmptyOnIndex" xml:space="preserve">
    <value>Found a column on index {indexName} on table {tableName} with an empty or null name. Not including column in index.</value>
    <comment>Warning RelationalDesignEventId.IndexColumnNotNamedWarning string string</comment>
  </data>
  <data name="LogPrincipalColumnNotFound" xml:space="preserve">
    <value>For foreign key with identity {id} on table {tableName}, unable to find the column called {principalColumnName} on the foreign key's principal table, {principaltableName}. Skipping foreign key.</value>
    <comment>Warning RelationalDesignEventId.ForeignKeyPrincipalColumnMissingWarning string string string string</comment>
  </data>
  <data name="LogCannotFindTypeMappingForColumn" xml:space="preserve">
    <value>Could not find type mapping for column '{columnName}' with data type '{dateType}'. Skipping column.</value>
    <comment>Warning RelationalDesignEventId.ColumnTypeNotMappedWarning string string</comment>
  </data>
  <data name="LogForeignKeyScaffoldErrorPrincipalKeyNotFound" xml:space="preserve">
    <value>Could not scaffold the foreign key '{foreignKeyName}'. A key for '{columnsList}' was not found in the principal entity type '{principalEntityType}'.</value>
    <comment>Warning RelationalDesignEventId.ForeignKeyReferencesMissingPrincipalKeyWarning string string string</comment>
  </data>
  <data name="LogForeignKeyScaffoldErrorPrincipalTableNotFound" xml:space="preserve">
    <value>Could not scaffold the foreign key '{foreignKeyName}'. The referenced table could not be found. This most likely occurred because the referenced table was excluded from scaffolding.</value>
    <comment>Warning RelationalDesignEventId.ForeignKeyReferencesMissingTableWarning string</comment>
  </data>
  <data name="LogForeignKeyScaffoldErrorPrincipalTableScaffoldingError" xml:space="preserve">
    <value>Could not scaffold the foreign key '{foreignKeyName}'. The referenced table '{principaltableName}' could not be scaffolded.</value>
    <comment>Warning RelationalDesignEventId.ForeignKeyReferencesNotMappedTableWarning string string</comment>
  </data>
  <data name="LogForeignKeyScaffoldErrorPropertyNotFound" xml:space="preserve">
    <value>Could not scaffold the foreign key '{foreignKeyName}'.  The following columns in the foreign key could not be scaffolded: {columnNames}.</value>
    <comment>Warning RelationalDesignEventId.ForeignKeyColumnsNotMappedWarning string string</comment>
  </data>
  <data name="LogPrimaryKeyErrorPropertyNotFound" xml:space="preserve">
    <value>Could not scaffold the primary key for '{tableName}'. The following columns in the primary key could not be scaffolded: {columnNames}.</value>
    <comment>Warning RelationalDesignEventId.PrimaryKeyColumnsNotMappedWarning string string</comment>
  </data>
  <data name="LogMissingPrimaryKey" xml:space="preserve">
    <value>Unable to identify the primary key for table '{tableName}'.</value>
    <comment>Warning RelationalDesignEventId.MissingPrimaryKeyWarning string</comment>
  </data>
  <data name="LogFoundTable" xml:space="preserve">
    <value>Found table with name: {name}.</value>
    <comment>Debug RelationalDesignEventId.TableFound string</comment>
  </data>
  <data name="LogTableNotInSelectionSet" xml:space="preserve">
    <value>Table {tableName} is not included in the selection set. Skipping.</value>
    <comment>Debug RelationalDesignEventId.TableSkipped string</comment>
  </data>
  <data name="LogColumnNotInSelectionSet" xml:space="preserve">
    <value>Column {columnName} belongs to table {tableName} which is not included in the selection set. Skipping.</value>
    <comment>Debug RelationalDesignEventId.ColumnSkipped string string</comment>
  </data>
  <data name="LogFoundIndex" xml:space="preserve">
    <value>Found index with name: {indexName}, table: {tableName}, is unique: {isUnique}.</value>
    <comment>Debug RelationalDesignEventId.IndexFound string string bool?</comment>
  </data>
  <data name="LogFoundIndexColumn" xml:space="preserve">
    <value>Found index column on index {indexName} on table {tableName}, column name: {columnName}, ordinal: {ordinal}.</value>
    <comment>Debug RelationalDesignEventId.IndexColumnFound string string string int?</comment>
  </data>
  <data name="LogIndexColumnNotInSelectionSet" xml:space="preserve">
    <value>Index column {columnName} belongs to index {indexName} on table {tableName} which is not included in the selection set. Skipping.</value>
    <comment>Warning RelationalDesignEventId.IndexColumnSkipped string string string</comment>
  </data>
  <data name="LogFoundSequence" xml:space="preserve">
    <value>Found sequence name: {name}, data type: {dataType}, cyclic: {isCyclic}, increment: {increment}, start: {start}, minimum: {min}, maximum: {max}.</value>
    <comment>Debug RelationalDesignEventId.SequenceFound string string bool? int? long? long? long?</comment>
  </data>
  <data name="LogColumnNameEmptyOnForeignKey" xml:space="preserve">
    <value>Found a column on foreign key {tableName}.{fkName} with an empty or null name. Not including column in foreign key</value>
    <comment>Warning RelationalDesignEventId.ForeignKeyColumnNotNamedWarning string string</comment>
  </data>
  <data name="LogColumnNameEmptyOnTable" xml:space="preserve">
    <value>Found a column on table {tableName} with an empty or null name. Skipping column.</value>
    <comment>Warning RelationalDesignEventId.ColumnNotNamedWarning string</comment>
  </data>
  <data name="LogUnableToFindTableForIndex" xml:space="preserve">
    <value>For index {indexName}. Unable to find parent table {tableName}. Skipping index.</value>
    <comment>Warning RelationalDesignEventId.IndexTableMissingWarning string string</comment>
  </data>
  <data name="LogIndexNameEmpty" xml:space="preserve">
    <value>Found an index on table {tableName} with an empty or null name. Skipping index.</value>
    <comment>Warning RelationalDesignEventId.IndexNotNamedWarning string</comment>
  </data>
  <data name="LogForeignKeyNameEmpty" xml:space="preserve">
    <value>Found a foreign key on table {tableName} with an empty or null name. Skipping foreign key.</value>
    <comment>Warning RelationalDesignEventId.ForeignKeyNotNamedWarning string</comment>
  </data>
  <data name="LogForeignKeyColumnNotInSelectionSet" xml:space="preserve">
    <value>Foreign key column {columnName} belongs to foreign key {fkName} on table {tableName} which is not included in the selection set. Skipping.</value>
    <comment>Warning RelationalDesignEventId.ForeignKeyColumnMissingWarning string string string</comment>
  </data>
  <data name="LogPrincipalTableNotInSelectionSet" xml:space="preserve">
    <value>For foreign key {fkName} on table {tableName}, unable to model the end of the foreign key on principal table {principaltableName}. This is usually because the principal table was not included in the selection set.</value>
    <comment>Warning RelationalDesignEventId.ForeignKeyReferencesMissingPrincipalTableWarning string string string</comment>
  </data>
  <data name="LogUnableToGenerateEntityType" xml:space="preserve">
    <value>Unable to generate entity type for table '{tableName}'.</value>
    <comment>Warning RelationalDesignEventId.UnableToGenerateEntityTypeWarning string</comment>
  </data>
  <data name="LogUnableToScaffoldIndexMissingProperty" xml:space="preserve">
    <value>Unable to scaffold the index '{indexName}'. The following columns could not be scaffolded: {columnNames}.</value>
    <comment>Warning RelationalDesignEventId.IndexColumnsNotMappedWarning string string</comment>
  </data>
  <data name="LogSequencesRequireName" xml:space="preserve">
    <value>Sequence name cannot be null or empty. Entity Framework cannot model a sequence that does not have a name.</value>
    <comment>Warning RelationalDesignEventId.SequenceNotNamedWarning</comment>
  </data>
  <data name="LogBadSequenceType" xml:space="preserve">
    <value>For sequence '{sequenceName}'. Unable to scaffold because it uses an unsupported type: '{typeName}'.</value>
    <comment>Warning RelationalDesignEventId.SequenceTypeNotSupportedWarning string string</comment>
  </data>
  <data name="LogMissingSchema" xml:space="preserve">
    <value>Unable to find a schema in the database matching the selected schema {schema}.</value>
    <comment>Warning RelationalDesignEventId.MissingSchemaWarning string</comment>
  </data>
  <data name="LogMissingTable" xml:space="preserve">
    <value>Unable to find a table in the database matching the selected table {table}.</value>
    <comment>Warning RelationalDesignEventId.MissingTableWarning string</comment>
  </data>
  <data name="LogForeignKeyPrincipalEndContainsNullableColumns" xml:space="preserve">
    <value>The principal end of the foreign key '{foreignKeyName}' is supported by the unique index '{indexName}' and contains the following nullable columns '{columnNames}'. Entity Framework requires the properties representing those columns to be non-nullable.</value>
    <comment>Warning RelationalDesignEventId.ForeignKeyPrincipalEndContainsNullableColumnsWarning string string string</comment>
  </data>
</root>