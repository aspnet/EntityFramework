// <auto-generated />
namespace Microsoft.Data.Entity.Sqlite.Design
{
    using System.Diagnostics;
    using System.Globalization;
    using System.Reflection;
    using System.Resources;
	using JetBrains.Annotations;

    public static class Strings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("EntityFramework.Sqlite.Design.Strings", typeof(Strings).GetTypeInfo().Assembly);

        /// <summary>
        /// Could not scaffold the foreign key {depTable}({depProperties}). One of the referenced properties or the referenced table could not be found.
        /// </summary>
        public static string ForeignKeyScaffoldError([CanBeNull] object depTable, [CanBeNull] object depProperties)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ForeignKeyScaffoldError", "depTable", "depProperties"), depTable, depProperties);
        }

        /// <summary>
        /// Unable to identify the primary key for table '{tableName}'.
        /// </summary>
        public static string MissingPrimaryKey([CanBeNull] object tableName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MissingPrimaryKey", "tableName"), tableName);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
