// <auto-generated />
namespace Microsoft.Data.Entity.SqlServer.Design
{
    using System.Diagnostics;
    using System.Globalization;
    using System.Reflection;
    using System.Resources;
	using JetBrains.Annotations;

    public static class Strings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("EntityFramework.SqlServer.Design.Strings", typeof(Strings).GetTypeInfo().Assembly);

        /// <summary>
        /// Could not find foreignKeyMapping for ConstraintId {constraintId} for FromColumn {fromColumnId}.
        /// </summary>
        public static string CannotFindForeignKeyMappingForConstraintId([CanBeNull] object constraintId, [CanBeNull] object fromColumnId)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CannotFindForeignKeyMappingForConstraintId", "constraintId", "fromColumnId"), constraintId, fromColumnId);
        }

        /// <summary>
        /// For foreign key ConstraintId {constraintId}, could not find relational property mapped to ToColumn with ColumnId {toColumnId}.
        /// </summary>
        public static string CannotFindRelationalPropertyForColumnId([CanBeNull] object constraintId, [CanBeNull] object toColumnId)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CannotFindRelationalPropertyForColumnId", "constraintId", "toColumnId"), constraintId, toColumnId);
        }

        /// <summary>
        /// For columnId {columnId}. Could not find table with TableId {tableId}. Skipping column.
        /// </summary>
        public static string CannotFindTableForColumn([CanBeNull] object columnId, [CanBeNull] object tableId)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CannotFindTableForColumn", "columnId", "tableId"), columnId, tableId);
        }

        /// <summary>
        /// For foreign key ConstraintId {constraintId}, could not find ToColumn with ColumnId {toColumnId}.
        /// </summary>
        public static string CannotFindToColumnForConstraintId([CanBeNull] object constraintId, [CanBeNull] object toColumnId)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CannotFindToColumnForConstraintId", "constraintId", "toColumnId"), constraintId, toColumnId);
        }

        /// <summary>
        /// For columnId {columnId}. Could not find type mapping for SQL Server type {sqlServerDataType}. Skipping column.
        /// </summary>
        public static string CannotFindTypeMappingForColumn([CanBeNull] object columnId, [CanBeNull] object sqlServerDataType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CannotFindTypeMappingForColumn", "columnId", "sqlServerDataType"), columnId, sqlServerDataType);
        }

        /// <summary>
        /// The SQL Server EntityType CodeGenerator is unable to generate EntityType {entityTypeName}. Error message: {errorMessage}.
        /// </summary>
        public static string CannotGenerateEntityType([CanBeNull] object entityTypeName, [CanBeNull] object errorMessage)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CannotGenerateEntityType", "entityTypeName", "errorMessage"), entityTypeName, errorMessage);
        }

        /// <summary>
        /// For columnId: {columnId}. The SQL Server data type is {sqlServerDataType}. This will be mapped to CLR type byte which does not allow ValueGenerationStrategy Identity. Generating a matching Property but ignoring the Identity setting.
        /// </summary>
        public static string DataTypeDoesNotAllowIdentityStrategy([CanBeNull] object columnId, [CanBeNull] object sqlServerDataType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DataTypeDoesNotAllowIdentityStrategy", "columnId", "sqlServerDataType"), columnId, sqlServerDataType);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
