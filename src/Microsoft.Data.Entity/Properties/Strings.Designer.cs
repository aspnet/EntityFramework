// <auto-generated />
namespace Microsoft.Data.Entity
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Strings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.Data.Entity.Strings", typeof(Strings).GetTypeInfo().Assembly);

        /// <summary>
        /// The string argument '{argumentName}' cannot be empty.
        /// </summary>
        internal static string ArgumentIsEmpty
        {
            get { return GetString("ArgumentIsEmpty"); }
        }

        /// <summary>
        /// The string argument '{argumentName}' cannot be empty.
        /// </summary>
        internal static string FormatArgumentIsEmpty(object argumentName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ArgumentIsEmpty", "argumentName"), argumentName);
        }

        /// <summary>
        /// A circular model foreign key dependency was detected: {cycle}.
        /// </summary>
        internal static string CircularDependency
        {
            get { return GetString("CircularDependency"); }
        }

        /// <summary>
        /// A circular model foreign key dependency was detected: {cycle}.
        /// </summary>
        internal static string FormatCircularDependency(object cycle)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CircularDependency", "cycle"), cycle);
        }

        /// <summary>
        /// The value provided for argument '{argumentName}' must be a valid value of enum type '{enumType}'.
        /// </summary>
        internal static string InvalidEnumValue
        {
            get { return GetString("InvalidEnumValue"); }
        }

        /// <summary>
        /// The value provided for argument '{argumentName}' must be a valid value of enum type '{enumType}'.
        /// </summary>
        internal static string FormatInvalidEnumValue(object argumentName, object enumType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidEnumValue", "argumentName", "enumType"), argumentName, enumType);
        }

        /// <summary>
        /// The properties expression '{expression}' is not valid. The expression should represent a property access: 't =&gt; t.MyProperty'. When specifying multiple properties use an anonymous type: 't =&gt; new {{ t.MyProperty1, t.MyProperty2 }}'.
        /// </summary>
        internal static string InvalidPropertiesExpression
        {
            get { return GetString("InvalidPropertiesExpression"); }
        }

        /// <summary>
        /// The properties expression '{expression}' is not valid. The expression should represent a property access: 't =&gt; t.MyProperty'. When specifying multiple properties use an anonymous type: 't =&gt; new {{ t.MyProperty1, t.MyProperty2 }}'.
        /// </summary>
        internal static string FormatInvalidPropertiesExpression(object expression)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidPropertiesExpression", "expression"), expression);
        }

        /// <summary>
        /// The expression '{expression}' is not a valid property expression. The expression should represent a property access: 't =&gt; t.MyProperty'.
        /// </summary>
        internal static string InvalidPropertyExpression
        {
            get { return GetString("InvalidPropertyExpression"); }
        }

        /// <summary>
        /// The expression '{expression}' is not a valid property expression. The expression should represent a property access: 't =&gt; t.MyProperty'.
        /// </summary>
        internal static string FormatInvalidPropertyExpression(object expression)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidPropertyExpression", "expression"), expression);
        }

        /// <summary>
        /// A service of type '{serviceType}' has not been configured. Either configure the service explicitly, or ensure one is available from the current IServiceProvider.
        /// </summary>
        internal static string MissingConfigurationItem
        {
            get { return GetString("MissingConfigurationItem"); }
        }

        /// <summary>
        /// A service of type '{serviceType}' has not been configured. Either configure the service explicitly, or ensure one is available from the current IServiceProvider.
        /// </summary>
        internal static string FormatMissingConfigurationItem(object serviceType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MissingConfigurationItem", "serviceType"), serviceType);
        }

        /// <summary>
        /// The instance of entity type '{entityType}' cannot be tracked because another instance of this type with the same key is already being tracked. For new entities consider using an IIdentityGenerator to generate unique key values.
        /// </summary>
        internal static string IdentityConflict
        {
            get { return GetString("IdentityConflict"); }
        }

        /// <summary>
        /// The instance of entity type '{entityType}' cannot be tracked because another instance of this type with the same key is already being tracked. For new entities consider using an IIdentityGenerator to generate unique key values.
        /// </summary>
        internal static string FormatIdentityConflict(object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("IdentityConflict", "entityType"), entityType);
        }

        /// <summary>
        /// The entity type '{entityType}' was not found. Ensure that the entity type '{entityType}' has been added to the model.
        /// </summary>
        internal static string EntityTypeNotFound
        {
            get { return GetString("EntityTypeNotFound"); }
        }

        /// <summary>
        /// The entity type '{entityType}' was not found. Ensure that the entity type '{entityType}' has been added to the model.
        /// </summary>
        internal static string FormatEntityTypeNotFound(object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("EntityTypeNotFound", "entityType"), entityType);
        }

        /// <summary>
        /// Sequence contains no elements.
        /// </summary>
        internal static string EmptySequence
        {
            get { return GetString("EmptySequence"); }
        }

        /// <summary>
        /// Sequence contains no elements.
        /// </summary>
        internal static string FormatEmptySequence()
        {
            return GetString("EmptySequence");
        }

        /// <summary>
        /// Sequence contains more than one element.
        /// </summary>
        internal static string MoreThanOneElement
        {
            get { return GetString("MoreThanOneElement"); }
        }

        /// <summary>
        /// Sequence contains more than one element.
        /// </summary>
        internal static string FormatMoreThanOneElement()
        {
            return GetString("MoreThanOneElement");
        }

        /// <summary>
        /// Sequence contains more than one matching element.
        /// </summary>
        internal static string MoreThanOneMatch
        {
            get { return GetString("MoreThanOneMatch"); }
        }

        /// <summary>
        /// Sequence contains more than one matching element.
        /// </summary>
        internal static string FormatMoreThanOneMatch()
        {
            return GetString("MoreThanOneMatch");
        }

        /// <summary>
        /// Sequence contains no matching element.
        /// </summary>
        internal static string NoMatch
        {
            get { return GetString("NoMatch"); }
        }

        /// <summary>
        /// Sequence contains no matching element.
        /// </summary>
        internal static string FormatNoMatch()
        {
            return GetString("NoMatch");
        }

        /// <summary>
        /// The entity type '{entityType}' requires an accessible default constructor.
        /// </summary>
        internal static string NoDefaultCtor
        {
            get { return GetString("NoDefaultCtor"); }
        }

        /// <summary>
        /// The entity type '{entityType}' requires an accessible default constructor.
        /// </summary>
        internal static string FormatNoDefaultCtor(object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NoDefaultCtor", "entityType"), entityType);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);
    
            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
