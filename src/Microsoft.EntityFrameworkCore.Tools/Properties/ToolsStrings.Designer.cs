// <auto-generated />
namespace Microsoft.EntityFrameworkCore.Internal
{
    using System.Diagnostics;
    using System.Globalization;
    using System.Reflection;
    using System.Resources;
    using JetBrains.Annotations;

    public static class ToolsStrings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.EntityFrameworkCore.Tools.Properties.ToolsStrings", typeof(ToolsStrings).GetTypeInfo().Assembly);

        /// <summary>
        /// Build failed on '{projectName}'.
        /// </summary>
        public static string BuildFailed([CanBeNull] object projectName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("BuildFailed", "projectName"), projectName);
        }

        /// <summary>
        /// This preview of Entity Framework tools does not support targeting class library projects in ASP.NET Core and .NET Core applications. See {fwlink} for details and workarounds.
        /// </summary>
        public static string ClassLibrariesNotSupportedInCli([CanBeNull] object fwlink)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ClassLibrariesNotSupportedInCli", "fwlink"), fwlink);
        }

        /// <summary>
        /// Could not invoke this command on this project. Commands for framework '{framework}' are only supported on Windows.
        /// </summary>
        public static string DesktopCommandsRequiresWindows([CanBeNull] object framework)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DesktopCommandsRequiresWindows", "framework"), framework);
        }

        /// <summary>
        /// Invoking dependency command '{projectCommand}' in project '{projectName}'
        /// </summary>
        public static string LogBeginDispatch([CanBeNull] object projectCommand, [CanBeNull] object projectName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LogBeginDispatch", "projectCommand", "projectName"), projectCommand, projectName);
        }

        /// <summary>
        /// Using configuration '{configName}'.
        /// </summary>
        public static string LogUsingConfiguration([CanBeNull] object configName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LogUsingConfiguration", "configName"), configName);
        }

        /// <summary>
        /// Using framework '{frameworkName}'.
        /// </summary>
        public static string LogUsingFramework([CanBeNull] object frameworkName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LogUsingFramework", "frameworkName"), frameworkName);
        }

        /// <summary>
        /// Using project '{projectName}'.
        /// </summary>
        public static string LogUsingProject([CanBeNull] object projectName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LogUsingProject", "projectName"), projectName);
        }

        /// <summary>
        /// Could not invoke this command on the project. Check that the version of {projectCommand} in "tools" and "dependencies" are the same. See {fwlink} for more details.
        /// </summary>
        public static string ProjectDependencyCommandNotFound([CanBeNull] object projectCommand, [CanBeNull] object fwlink)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ProjectDependencyCommandNotFound", "projectCommand", "fwlink"), projectCommand, fwlink);
        }

        /// <summary>
        /// Setting the data directory to '{path}'.
        /// </summary>
        public static string LogDataDirectory([CanBeNull] object path)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LogDataDirectory", "path"), path);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
