<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Resources" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>
<#

var parameterMatcher = new Regex(@"\{(\d)\}");
var lines = new List<Tuple<string, string, string, bool, string, string>>();

using (var resxReader = new ResXResourceReader(Path.ChangeExtension(Host.TemplateFile, "resx")))
{
    resxReader.UseResXDataNodes = true;

    foreach (DictionaryEntry entry in resxReader)
    {
        var node = (ResXDataNode)entry.Value;
        var value = (string)node.GetValue((System.ComponentModel.Design.ITypeResolutionService)null);

        var matchedArgs
            = parameterMatcher.Matches(value)
                .Cast<Match>()
                .Select(m => Convert.ToInt32(m.Groups[1].Value))
                .ToArray();
            
        var argGenerator
            = new object[matchedArgs.Any() ? matchedArgs.Max() + 1 : 0];

        lines.Add(Tuple.Create<string, string, string, bool, string, string>(
                node.Name, 
                value, 
                node.Comment.StartsWith("## ExceptionType=") ? node.Comment.Substring(17) : null,
                argGenerator.Any(),
                string.Join(", ", argGenerator.Select((_, i) => "p" + i)),
                "(" + string.Join(", ", argGenerator.Select((_, i) => "object p" + i)) + ")"
            ));
    }
}

string outputNamespace = Host.ResolveParameterValue("directiveId", "namespaceDirectiveProcessor", "namespaceHint") ?? string.Empty;
#>
// <auto-generated />

namespace <#= outputNamespace #>
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Strings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.Data.Core.Resources.Resources", typeof(Strings).GetTypeInfo().Assembly);
<#
        foreach (var line in lines)
        {
        #>

        /// <summary>
        ///     "<#= line.Item2 #>"
        /// </summary>
        internal static string <#= line.Item1 #><#= line.Item4 ? line.Item6 : string.Empty #>
        {
            <#
            if (!line.Item4)
            {
            #>get { return GetString("<#= line.Item1 #>"); }
<#
            }
            else
            {
            #>return string.Format(CultureInfo.CurrentCulture, GetString("<#= line.Item1 #>"), <#= line.Item5 #>);
<#
            }#>
        }
<#
        }#>

        private static string GetString(string name)
        {
            return _resourceManager.GetString(name)
                    ?? "ERROR: Resource '" + name + "' NOT FOUND!";
        }
    }
}
