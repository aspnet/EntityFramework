// <auto-generated />
namespace Microsoft.Data.Entity
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Strings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("EntityFramework.Strings", typeof(Strings).GetTypeInfo().Assembly);

        /// <summary>
        /// The string argument '{argumentName}' cannot be empty.
        /// </summary>
        internal static string ArgumentIsEmpty
        {
            get { return GetString("ArgumentIsEmpty"); }
        }

        /// <summary>
        /// The string argument '{argumentName}' cannot be empty.
        /// </summary>
        internal static string FormatArgumentIsEmpty(object argumentName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ArgumentIsEmpty", "argumentName"), argumentName);
        }

        /// <summary>
        /// A circular model foreign key dependency was detected: {cycle}.
        /// </summary>
        internal static string CircularDependency
        {
            get { return GetString("CircularDependency"); }
        }

        /// <summary>
        /// A circular model foreign key dependency was detected: {cycle}.
        /// </summary>
        internal static string FormatCircularDependency(object cycle)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CircularDependency", "cycle"), cycle);
        }

        /// <summary>
        /// The value provided for argument '{argumentName}' must be a valid value of enum type '{enumType}'.
        /// </summary>
        internal static string InvalidEnumValue
        {
            get { return GetString("InvalidEnumValue"); }
        }

        /// <summary>
        /// The value provided for argument '{argumentName}' must be a valid value of enum type '{enumType}'.
        /// </summary>
        internal static string FormatInvalidEnumValue(object argumentName, object enumType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidEnumValue", "argumentName", "enumType"), argumentName, enumType);
        }

        /// <summary>
        /// The properties expression '{expression}' is not valid. The expression should represent a property access: 't =&gt; t.MyProperty'. When specifying multiple properties use an anonymous type: 't =&gt; new {{ t.MyProperty1, t.MyProperty2 }}'.
        /// </summary>
        internal static string InvalidPropertiesExpression
        {
            get { return GetString("InvalidPropertiesExpression"); }
        }

        /// <summary>
        /// The properties expression '{expression}' is not valid. The expression should represent a property access: 't =&gt; t.MyProperty'. When specifying multiple properties use an anonymous type: 't =&gt; new {{ t.MyProperty1, t.MyProperty2 }}'.
        /// </summary>
        internal static string FormatInvalidPropertiesExpression(object expression)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidPropertiesExpression", "expression"), expression);
        }

        /// <summary>
        /// The expression '{expression}' is not a valid property expression. The expression should represent a property access: 't =&gt; t.MyProperty'.
        /// </summary>
        internal static string InvalidPropertyExpression
        {
            get { return GetString("InvalidPropertyExpression"); }
        }

        /// <summary>
        /// The expression '{expression}' is not a valid property expression. The expression should represent a property access: 't =&gt; t.MyProperty'.
        /// </summary>
        internal static string FormatInvalidPropertyExpression(object expression)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidPropertyExpression", "expression"), expression);
        }

        /// <summary>
        /// The instance of entity type '{entityType}' cannot be tracked because another instance of this type with the same key is already being tracked. For new entities consider using an IIdentityGenerator to generate unique key values.
        /// </summary>
        internal static string IdentityConflict
        {
            get { return GetString("IdentityConflict"); }
        }

        /// <summary>
        /// The instance of entity type '{entityType}' cannot be tracked because another instance of this type with the same key is already being tracked. For new entities consider using an IIdentityGenerator to generate unique key values.
        /// </summary>
        internal static string FormatIdentityConflict(object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("IdentityConflict", "entityType"), entityType);
        }

        /// <summary>
        /// The instance of entity type '{entityType}' cannot be tracked because it has a null primary key. Either set the key explicitly or consider using an IValueGenerator to generate unique key values.
        /// </summary>
        internal static string NullPrimaryKey
        {
            get { return GetString("NullPrimaryKey"); }
        }

        /// <summary>
        /// The instance of entity type '{entityType}' cannot be tracked because it has a null primary key. Either set the key explicitly or consider using an IValueGenerator to generate unique key values.
        /// </summary>
        internal static string FormatNullPrimaryKey(object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NullPrimaryKey", "entityType"), entityType);
        }

        /// <summary>
        /// Cannot start tracking StateEntry for entity type '{entityType}' because it was created by a different StateManager instance.
        /// </summary>
        internal static string WrongStateManager
        {
            get { return GetString("WrongStateManager"); }
        }

        /// <summary>
        /// Cannot start tracking StateEntry for entity type '{entityType}' because it was created by a different StateManager instance.
        /// </summary>
        internal static string FormatWrongStateManager(object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("WrongStateManager", "entityType"), entityType);
        }

        /// <summary>
        /// Cannot start tracking StateEntry for entity type '{entityType}' because another StateEntry is already tracking the same entity.
        /// </summary>
        internal static string MultipleStateEntries
        {
            get { return GetString("MultipleStateEntries"); }
        }

        /// <summary>
        /// Cannot start tracking StateEntry for entity type '{entityType}' because another StateEntry is already tracking the same entity.
        /// </summary>
        internal static string FormatMultipleStateEntries(object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MultipleStateEntries", "entityType"), entityType);
        }

        /// <summary>
        /// The entity type '{entityType}' was not found. Ensure that the entity type has been added to the model.
        /// </summary>
        internal static string EntityTypeNotFound
        {
            get { return GetString("EntityTypeNotFound"); }
        }

        /// <summary>
        /// The entity type '{entityType}' was not found. Ensure that the entity type has been added to the model.
        /// </summary>
        internal static string FormatEntityTypeNotFound(object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("EntityTypeNotFound", "entityType"), entityType);
        }

        /// <summary>
        /// The property '{property}' on entity type '{entityType}' could not be found. Ensure that the property exists and has been included in the model.
        /// </summary>
        internal static string PropertyNotFound
        {
            get { return GetString("PropertyNotFound"); }
        }

        /// <summary>
        /// The property '{property}' on entity type '{entityType}' could not be found. Ensure that the property exists and has been included in the model.
        /// </summary>
        internal static string FormatPropertyNotFound(object property, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PropertyNotFound", "property", "entityType"), property, entityType);
        }

        /// <summary>
        /// Sequence contains no elements.
        /// </summary>
        internal static string EmptySequence
        {
            get { return GetString("EmptySequence"); }
        }

        /// <summary>
        /// Sequence contains no elements.
        /// </summary>
        internal static string FormatEmptySequence()
        {
            return GetString("EmptySequence");
        }

        /// <summary>
        /// Sequence contains more than one element.
        /// </summary>
        internal static string MoreThanOneElement
        {
            get { return GetString("MoreThanOneElement"); }
        }

        /// <summary>
        /// Sequence contains more than one element.
        /// </summary>
        internal static string FormatMoreThanOneElement()
        {
            return GetString("MoreThanOneElement");
        }

        /// <summary>
        /// Sequence contains more than one matching element.
        /// </summary>
        internal static string MoreThanOneMatch
        {
            get { return GetString("MoreThanOneMatch"); }
        }

        /// <summary>
        /// Sequence contains more than one matching element.
        /// </summary>
        internal static string FormatMoreThanOneMatch()
        {
            return GetString("MoreThanOneMatch");
        }

        /// <summary>
        /// Sequence contains no matching element.
        /// </summary>
        internal static string NoMatch
        {
            get { return GetString("NoMatch"); }
        }

        /// <summary>
        /// Sequence contains no matching element.
        /// </summary>
        internal static string FormatNoMatch()
        {
            return GetString("NoMatch");
        }

        /// <summary>
        /// The collection argument '{argumentName}' must contain at least one element.
        /// </summary>
        internal static string CollectionArgumentIsEmpty
        {
            get { return GetString("CollectionArgumentIsEmpty"); }
        }

        /// <summary>
        /// The collection argument '{argumentName}' must contain at least one element.
        /// </summary>
        internal static string FormatCollectionArgumentIsEmpty(object argumentName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CollectionArgumentIsEmpty", "argumentName"), argumentName);
        }

        /// <summary>
        /// The properties provided for the argument '{argumentName}' are declared on different entity types.
        /// </summary>
        internal static string InconsistentEntityType
        {
            get { return GetString("InconsistentEntityType"); }
        }

        /// <summary>
        /// The properties provided for the argument '{argumentName}' are declared on different entity types.
        /// </summary>
        internal static string FormatInconsistentEntityType(object argumentName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InconsistentEntityType", "argumentName"), argumentName);
        }

        /// <summary>
        /// The entity type '{entityType}' requires a key to be defined.
        /// </summary>
        internal static string EntityRequiresKey
        {
            get { return GetString("EntityRequiresKey"); }
        }

        /// <summary>
        /// The entity type '{entityType}' requires a key to be defined.
        /// </summary>
        internal static string FormatEntityRequiresKey(object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("EntityRequiresKey", "entityType"), entityType);
        }

        /// <summary>
        /// The specified key properties {key} are not declared on the entity type '{entityType}'. Ensure key properties are declared on the target entity type.
        /// </summary>
        internal static string KeyPropertiesWrongEntity
        {
            get { return GetString("KeyPropertiesWrongEntity"); }
        }

        /// <summary>
        /// The specified key properties {key} are not declared on the entity type '{entityType}'. Ensure key properties are declared on the target entity type.
        /// </summary>
        internal static string FormatKeyPropertiesWrongEntity(object key, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("KeyPropertiesWrongEntity", "key", "entityType"), key, entityType);
        }

        /// <summary>
        /// The specified foreign key properties {foreignKey} are not declared on the entity type '{entityType}'. Ensure foreign key properties are declared on the target entity type.
        /// </summary>
        internal static string ForeignKeyPropertiesWrongEntity
        {
            get { return GetString("ForeignKeyPropertiesWrongEntity"); }
        }

        /// <summary>
        /// The specified foreign key properties {foreignKey} are not declared on the entity type '{entityType}'. Ensure foreign key properties are declared on the target entity type.
        /// </summary>
        internal static string FormatForeignKeyPropertiesWrongEntity(object foreignKey, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ForeignKeyPropertiesWrongEntity", "foreignKey", "entityType"), foreignKey, entityType);
        }

        /// <summary>
        /// The specified index properties {index} are not declared on the entity type '{entityType}'. Ensure index properties are declared on the target entity type.
        /// </summary>
        internal static string IndexPropertiesWrongEntity
        {
            get { return GetString("IndexPropertiesWrongEntity"); }
        }

        /// <summary>
        /// The specified index properties {index} are not declared on the entity type '{entityType}'. Ensure index properties are declared on the target entity type.
        /// </summary>
        internal static string FormatIndexPropertiesWrongEntity(object index, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("IndexPropertiesWrongEntity", "index", "entityType"), index, entityType);
        }

        /// <summary>
        /// The source IQueryable doesn't implement IAsyncEnumerable&lt;{genericParameter}&gt;. Only sources that implement IAsyncEnumerable can be used for Entity Framework asynchronous operations.
        /// </summary>
        internal static string IQueryableNotAsync
        {
            get { return GetString("IQueryableNotAsync"); }
        }

        /// <summary>
        /// The source IQueryable doesn't implement IAsyncEnumerable&lt;{genericParameter}&gt;. Only sources that implement IAsyncEnumerable can be used for Entity Framework asynchronous operations.
        /// </summary>
        internal static string FormatIQueryableNotAsync(object genericParameter)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("IQueryableNotAsync", "genericParameter"), genericParameter);
        }

        /// <summary>
        /// The provider for the source IQueryable doesn't implement IAsyncQueryProvider. Only providers that implement IEntityQueryProvider can be used for Entity Framework asynchronous operations.
        /// </summary>
        internal static string IQueryableProviderNotAsync
        {
            get { return GetString("IQueryableProviderNotAsync"); }
        }

        /// <summary>
        /// The provider for the source IQueryable doesn't implement IAsyncQueryProvider. Only providers that implement IEntityQueryProvider can be used for Entity Framework asynchronous operations.
        /// </summary>
        internal static string FormatIQueryableProviderNotAsync()
        {
            return GetString("IQueryableProviderNotAsync");
        }

        /// <summary>
        /// Lazy original value tracking cannot be turned on for entity type '{entityType}'. Entities that do not implement both INotifyPropertyChanging and INotifyPropertyChanged require original values to be stored eagerly in order to correct detect changes made to entities.
        /// </summary>
        internal static string EagerOriginalValuesRequired
        {
            get { return GetString("EagerOriginalValuesRequired"); }
        }

        /// <summary>
        /// Lazy original value tracking cannot be turned on for entity type '{entityType}'. Entities that do not implement both INotifyPropertyChanging and INotifyPropertyChanged require original values to be stored eagerly in order to correct detect changes made to entities.
        /// </summary>
        internal static string FormatEagerOriginalValuesRequired(object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("EagerOriginalValuesRequired", "entityType"), entityType);
        }

        /// <summary>
        /// The original value for property '{property}' of entity type '{entityType}' cannot be accessed because it is not being tracked. To access all original values set 'UseLazyOriginalValues' to false on the entity type.
        /// </summary>
        internal static string OriginalValueNotTracked
        {
            get { return GetString("OriginalValueNotTracked"); }
        }

        /// <summary>
        /// The original value for property '{property}' of entity type '{entityType}' cannot be accessed because it is not being tracked. To access all original values set 'UseLazyOriginalValues' to false on the entity type.
        /// </summary>
        internal static string FormatOriginalValueNotTracked(object property, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("OriginalValueNotTracked", "property", "entityType"), property, entityType);
        }

        /// <summary>
        /// The property '{entityType}.{property}' is annotated with backing field '{field}' but that field cannot be found.
        /// </summary>
        internal static string MissingBackingField
        {
            get { return GetString("MissingBackingField"); }
        }

        /// <summary>
        /// The property '{entityType}.{property}' is annotated with backing field '{field}' but that field cannot be found.
        /// </summary>
        internal static string FormatMissingBackingField(object entityType, object property, object field)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MissingBackingField", "entityType", "property", "field"), entityType, property, field);
        }

        /// <summary>
        /// The annotated backing field '{field}' of type '{fieldType}' cannot be used for the property '{entityType}.{property}' of type '{propertyType}'. Only backing fields of types that are assignable from the property type can be used.
        /// </summary>
        internal static string BadBackingFieldType
        {
            get { return GetString("BadBackingFieldType"); }
        }

        /// <summary>
        /// The annotated backing field '{field}' of type '{fieldType}' cannot be used for the property '{entityType}.{property}' of type '{propertyType}'. Only backing fields of types that are assignable from the property type can be used.
        /// </summary>
        internal static string FormatBadBackingFieldType(object field, object fieldType, object entityType, object property, object propertyType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("BadBackingFieldType", "field", "fieldType", "entityType", "property", "propertyType"), field, fieldType, entityType, property, propertyType);
        }

        /// <summary>
        /// No backing field could be discovered for property '{entityType}.{property}' and the property does not have a setter. Either use a backing field name that can be matched by convention, annotate the property with a backing field, or define a property setter.
        /// </summary>
        internal static string NoFieldOrSetter
        {
            get { return GetString("NoFieldOrSetter"); }
        }

        /// <summary>
        /// No backing field could be discovered for property '{entityType}.{property}' and the property does not have a setter. Either use a backing field name that can be matched by convention, annotate the property with a backing field, or define a property setter.
        /// </summary>
        internal static string FormatNoFieldOrSetter(object entityType, object property)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NoFieldOrSetter", "entityType", "property"), entityType, property);
        }

        /// <summary>
        /// The CLR entity materializer cannot be used for entity type '{entityType}' because it is a shadow-state entity type.  Materialization to a CLR type is only possible for entity types that have a corresponding CLR type.
        /// </summary>
        internal static string NoClrType
        {
            get { return GetString("NoClrType"); }
        }

        /// <summary>
        /// The CLR entity materializer cannot be used for entity type '{entityType}' because it is a shadow-state entity type.  Materialization to a CLR type is only possible for entity types that have a corresponding CLR type.
        /// </summary>
        internal static string FormatNoClrType(object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NoClrType", "entityType"), entityType);
        }

        /// <summary>
        /// The data stores {storeNames}are configured. A context can only be configured to use a single data store.
        /// </summary>
        internal static string MultipleDataStoresConfigured
        {
            get { return GetString("MultipleDataStoresConfigured"); }
        }

        /// <summary>
        /// The data stores {storeNames}are configured. A context can only be configured to use a single data store.
        /// </summary>
        internal static string FormatMultipleDataStoresConfigured(object storeNames)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MultipleDataStoresConfigured", "storeNames"), storeNames);
        }

        /// <summary>
        /// No data stores are configured. Configure a data store by overriding OnConfiguring in your DbContext class or in the AddDbContext method when setting up services.
        /// </summary>
        internal static string NoDataStoreConfigured
        {
            get { return GetString("NoDataStoreConfigured"); }
        }

        /// <summary>
        /// No data stores are configured. Configure a data store by overriding OnConfiguring in your DbContext class or in the AddDbContext method when setting up services.
        /// </summary>
        internal static string FormatNoDataStoreConfigured()
        {
            return GetString("NoDataStoreConfigured");
        }

        /// <summary>
        /// No data stores are available. Ensure that data store services are added inside the call to AddEntityFramework on your ServiceCollection.
        /// </summary>
        internal static string NoDataStoreService
        {
            get { return GetString("NoDataStoreService"); }
        }

        /// <summary>
        /// No data stores are available. Ensure that data store services are added inside the call to AddEntityFramework on your ServiceCollection.
        /// </summary>
        internal static string FormatNoDataStoreService()
        {
            return GetString("NoDataStoreService");
        }

        /// <summary>
        /// The data stores {storeNames}are available. A context can only be configured to use a single data store. Configure a data store by overriding OnConfiguring in your DbContext class or in the AddDbContext method when setting up services.
        /// </summary>
        internal static string MultipleDataStoresAvailable
        {
            get { return GetString("MultipleDataStoresAvailable"); }
        }

        /// <summary>
        /// The data stores {storeNames}are available. A context can only be configured to use a single data store. Configure a data store by overriding OnConfiguring in your DbContext class or in the AddDbContext method when setting up services.
        /// </summary>
        internal static string FormatMultipleDataStoresAvailable(object storeNames)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MultipleDataStoresAvailable", "storeNames"), storeNames);
        }

        /// <summary>
        /// Multiple potential primary key properties named '{property}' but differing only by case were found on entity type '{entityType}'. Configure the primary key explicitly using the SetKey fluent API.
        /// </summary>
        internal static string MultiplePropertiesMatchedAsKeys
        {
            get { return GetString("MultiplePropertiesMatchedAsKeys"); }
        }

        /// <summary>
        /// Multiple potential primary key properties named '{property}' but differing only by case were found on entity type '{entityType}'. Configure the primary key explicitly using the SetKey fluent API.
        /// </summary>
        internal static string FormatMultiplePropertiesMatchedAsKeys(object property, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MultiplePropertiesMatchedAsKeys", "property", "entityType"), property, entityType);
        }

        /// <summary>
        /// The '{propertyName}' on entity type '{entityType}' is set up to use generated values, but no value generator is available for properties of type '{propertyType}'. To use value generation for properties of type '{propertyType}' the data store must configure an appropriate value generator.
        /// </summary>
        internal static string NoValueGenerator
        {
            get { return GetString("NoValueGenerator"); }
        }

        /// <summary>
        /// The '{propertyName}' on entity type '{entityType}' is set up to use generated values, but no value generator is available for properties of type '{propertyType}'. To use value generation for properties of type '{propertyType}' the data store must configure an appropriate value generator.
        /// </summary>
        internal static string FormatNoValueGenerator(object propertyName, object entityType, object propertyType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NoValueGenerator", "propertyName", "entityType", "propertyType"), propertyName, entityType, propertyType);
        }

        /// <summary>
        /// A property with the storage name '{property}' on entity type '{entityType}' could not be found. Ensure that the property exists, has been included in the model, and has been configured with storage name specified.
        /// </summary>
        internal static string PropertyWithStorageNameNotFound
        {
            get { return GetString("PropertyWithStorageNameNotFound"); }
        }

        /// <summary>
        /// A property with the storage name '{property}' on entity type '{entityType}' could not be found. Ensure that the property exists, has been included in the model, and has been configured with storage name specified.
        /// </summary>
        internal static string FormatPropertyWithStorageNameNotFound(object property, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PropertyWithStorageNameNotFound", "property", "entityType"), property, entityType);
        }

        /// <summary>
        /// CurrentValues are always in sync with the entity state.
        /// </summary>
        internal static string CurrentValuesAlwaysInSync
        {
            get { return GetString("CurrentValuesAlwaysInSync"); }
        }

        /// <summary>
        /// CurrentValues are always in sync with the entity state.
        /// </summary>
        internal static string FormatCurrentValuesAlwaysInSync()
        {
            return GetString("CurrentValuesAlwaysInSync");
        }

        /// <summary>
        /// An error occured while running a data store operation. See InnerException for details.
        /// </summary>
        internal static string DataStoreException
        {
            get { return GetString("DataStoreException"); }
        }

        /// <summary>
        /// An error occured while running a data store operation. See InnerException for details.
        /// </summary>
        internal static string FormatDataStoreException()
        {
            return GetString("DataStoreException");
        }

        /// <summary>
        /// An exception occurred in the data store while iterating the results of a query.{newline}{error}
        /// </summary>
        internal static string LogExceptionDuringQueryIteration
        {
            get { return GetString("LogExceptionDuringQueryIteration"); }
        }

        /// <summary>
        /// An exception occurred in the data store while iterating the results of a query.{newline}{error}
        /// </summary>
        internal static string FormatLogExceptionDuringQueryIteration(object newline, object error)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LogExceptionDuringQueryIteration", "newline", "error"), newline, error);
        }

        /// <summary>
        /// An exception occurred in the data store while saving changes.{newline}{error}
        /// </summary>
        internal static string LogExceptionDuringSaveChanges
        {
            get { return GetString("LogExceptionDuringSaveChanges"); }
        }

        /// <summary>
        /// An exception occurred in the data store while saving changes.{newline}{error}
        /// </summary>
        internal static string FormatLogExceptionDuringSaveChanges(object newline, object error)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LogExceptionDuringSaveChanges", "newline", "error"), newline, error);
        }

        /// <summary>
        /// The Property&lt;T&gt; extension method may only be used within LINQ queries.
        /// </summary>
        internal static string PropertyExtensionInvoked
        {
            get { return GetString("PropertyExtensionInvoked"); }
        }

        /// <summary>
        /// The Property&lt;T&gt; extension method may only be used within LINQ queries.
        /// </summary>
        internal static string FormatPropertyExtensionInvoked()
        {
            return GetString("PropertyExtensionInvoked");
        }

        /// <summary>
        /// The property '{property}' cannot be added to the entity type '{entityType}' because a property with the same name already exists.
        /// </summary>
        internal static string DuplicateProperty
        {
            get { return GetString("DuplicateProperty"); }
        }

        /// <summary>
        /// The property '{property}' cannot be added to the entity type '{entityType}' because a property with the same name already exists.
        /// </summary>
        internal static string FormatDuplicateProperty(object property, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DuplicateProperty", "property", "entityType"), property, entityType);
        }

        /// <summary>
        /// The property '{property}' cannot exist on entity type '{entityType}' because the property is not marked as shadow state and no corresponding CLR property exists on the underlying type.
        /// </summary>
        internal static string NoClrProperty
        {
            get { return GetString("NoClrProperty"); }
        }

        /// <summary>
        /// The property '{property}' cannot exist on entity type '{entityType}' because the property is not marked as shadow state and no corresponding CLR property exists on the underlying type.
        /// </summary>
        internal static string FormatNoClrProperty(object property, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NoClrProperty", "property", "entityType"), property, entityType);
        }

        /// <summary>
        /// The property '{property}' cannot exist on entity type '{entityType}' because the property is not marked as shadow state and the type of the corresponding CLR property does not match the type specified in the property.
        /// </summary>
        internal static string WrongClrPropertyType
        {
            get { return GetString("WrongClrPropertyType"); }
        }

        /// <summary>
        /// The property '{property}' cannot exist on entity type '{entityType}' because the property is not marked as shadow state and the type of the corresponding CLR property does not match the type specified in the property.
        /// </summary>
        internal static string FormatWrongClrPropertyType(object property, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("WrongClrPropertyType", "property", "entityType"), property, entityType);
        }

        /// <summary>
        /// The property '{property}' cannot exist on entity type '{entityType}' because the entity type is marked as shadow state while the property is not. Shadow state entity types can only contain shadow state properties.
        /// </summary>
        internal static string ClrPropertyOnShadowEntity
        {
            get { return GetString("ClrPropertyOnShadowEntity"); }
        }

        /// <summary>
        /// The property '{property}' cannot exist on entity type '{entityType}' because the entity type is marked as shadow state while the property is not. Shadow state entity types can only contain shadow state properties.
        /// </summary>
        internal static string FormatClrPropertyOnShadowEntity(object property, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ClrPropertyOnShadowEntity", "property", "entityType"), property, entityType);
        }

        /// <summary>
        /// The property '{property}' cannot be removed from entity type '{entityType}' because it is being used in an index or key. All indexes and keys must be removed or redefined before the property can be removed.
        /// </summary>
        internal static string PropertyInUse
        {
            get { return GetString("PropertyInUse"); }
        }

        /// <summary>
        /// The property '{property}' cannot be removed from entity type '{entityType}' because it is being used in an index or key. All indexes and keys must be removed or redefined before the property can be removed.
        /// </summary>
        internal static string FormatPropertyInUse(object property, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PropertyInUse", "property", "entityType"), property, entityType);
        }

        /// <summary>
        /// Cannot remove key {key} from entity type '{entityType}' because it is referenced by a foreign key in entity type '{dependentType}'. All foreign keys must be removed or redefined before the referenced key can be removed.
        /// </summary>
        internal static string KeyInUse
        {
            get { return GetString("KeyInUse"); }
        }

        /// <summary>
        /// Cannot remove key {key} from entity type '{entityType}' because it is referenced by a foreign key in entity type '{dependentType}'. All foreign keys must be removed or redefined before the referenced key can be removed.
        /// </summary>
        internal static string FormatKeyInUse(object key, object entityType, object dependentType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("KeyInUse", "key", "entityType", "dependentType"), key, entityType, dependentType);
        }

        /// <summary>
        /// Cannot remove foreign key {foreignKey} from entity type '{entityType}' because it is referenced by navigation property '{navigation}' in entity type '{dependentType}'. All navigations must be removed or redefined before the referenced foreign key can be removed.
        /// </summary>
        internal static string ForeignKeyInUse
        {
            get { return GetString("ForeignKeyInUse"); }
        }

        /// <summary>
        /// Cannot remove foreign key {foreignKey} from entity type '{entityType}' because it is referenced by navigation property '{navigation}' in entity type '{dependentType}'. All navigations must be removed or redefined before the referenced foreign key can be removed.
        /// </summary>
        internal static string FormatForeignKeyInUse(object foreignKey, object entityType, object navigation, object dependentType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ForeignKeyInUse", "foreignKey", "entityType", "navigation", "dependentType"), foreignKey, entityType, navigation, dependentType);
        }

        /// <summary>
        /// The navigation property '{navigation}' cannot be added to the entity type '{entityType}' because it already belongs to entity type '{existingEntityType}'.
        /// </summary>
        internal static string NavigationAlreadyOwned
        {
            get { return GetString("NavigationAlreadyOwned"); }
        }

        /// <summary>
        /// The navigation property '{navigation}' cannot be added to the entity type '{entityType}' because it already belongs to entity type '{existingEntityType}'.
        /// </summary>
        internal static string FormatNavigationAlreadyOwned(object navigation, object entityType, object existingEntityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NavigationAlreadyOwned", "navigation", "entityType", "existingEntityType"), navigation, entityType, existingEntityType);
        }

        /// <summary>
        /// The navigation property '{navigation}' cannot be added to the entity type '{entityType}' because a navigation property with the same name already exists.
        /// </summary>
        internal static string DuplicateNavigation
        {
            get { return GetString("DuplicateNavigation"); }
        }

        /// <summary>
        /// The navigation property '{navigation}' cannot be added to the entity type '{entityType}' because a navigation property with the same name already exists.
        /// </summary>
        internal static string FormatDuplicateNavigation(object navigation, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DuplicateNavigation", "navigation", "entityType"), navigation, entityType);
        }

        /// <summary>
        /// The navigation property '{navigation}' cannot be added to entity type '{entityType}' because the entity type is defined in shadow state and navigations properties cannot be added to shadow state.
        /// </summary>
        internal static string NavigationOnShadowEntity
        {
            get { return GetString("NavigationOnShadowEntity"); }
        }

        /// <summary>
        /// The navigation property '{navigation}' cannot be added to entity type '{entityType}' because the entity type is defined in shadow state and navigations properties cannot be added to shadow state.
        /// </summary>
        internal static string FormatNavigationOnShadowEntity(object navigation, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NavigationOnShadowEntity", "navigation", "entityType"), navigation, entityType);
        }

        /// <summary>
        /// The navigation property '{navigation}' cannot be added to entity type '{entityType}' because there is no corresponding CLR property on the underlying type and navigations properties cannot be added to shadow state.
        /// </summary>
        internal static string NoClrNavigation
        {
            get { return GetString("NoClrNavigation"); }
        }

        /// <summary>
        /// The navigation property '{navigation}' cannot be added to entity type '{entityType}' because there is no corresponding CLR property on the underlying type and navigations properties cannot be added to shadow state.
        /// </summary>
        internal static string FormatNoClrNavigation(object navigation, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NoClrNavigation", "navigation", "entityType"), navigation, entityType);
        }

        /// <summary>
        /// The navigation property '{navigation}' cannot be added to entity type '{entityType}' because its CLR type '{clrType}' does not match the CLR type '{targetType}' of the related entity.
        /// </summary>
        internal static string WrongClrSingleNavigationType
        {
            get { return GetString("WrongClrSingleNavigationType"); }
        }

        /// <summary>
        /// The navigation property '{navigation}' cannot be added to entity type '{entityType}' because its CLR type '{clrType}' does not match the CLR type '{targetType}' of the related entity.
        /// </summary>
        internal static string FormatWrongClrSingleNavigationType(object navigation, object entityType, object clrType, object targetType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("WrongClrSingleNavigationType", "navigation", "entityType", "clrType", "targetType"), navigation, entityType, clrType, targetType);
        }

        /// <summary>
        /// The collection navigation property '{navigation}' cannot be added to entity type '{entityType}' because its CLR type '{clrType}' does not implement 'IEnumerable&lt;{targetType}&gt;'. Collection navigation properties must implement IEnumerable&lt;&gt; of the related entity.
        /// </summary>
        internal static string WrongClrCollectionNavigationType
        {
            get { return GetString("WrongClrCollectionNavigationType"); }
        }

        /// <summary>
        /// The collection navigation property '{navigation}' cannot be added to entity type '{entityType}' because its CLR type '{clrType}' does not implement 'IEnumerable&lt;{targetType}&gt;'. Collection navigation properties must implement IEnumerable&lt;&gt; of the related entity.
        /// </summary>
        internal static string FormatWrongClrCollectionNavigationType(object navigation, object entityType, object clrType, object targetType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("WrongClrCollectionNavigationType", "navigation", "entityType", "clrType", "targetType"), navigation, entityType, clrType, targetType);
        }

        /// <summary>
        /// The navigation property '{navigation}' on entity type '{entityType}' could not be found. Ensure that the navigation property exists and has been included in the model.
        /// </summary>
        internal static string NavigationNotFound
        {
            get { return GetString("NavigationNotFound"); }
        }

        /// <summary>
        /// The navigation property '{navigation}' on entity type '{entityType}' could not be found. Ensure that the navigation property exists and has been included in the model.
        /// </summary>
        internal static string FormatNavigationNotFound(object navigation, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NavigationNotFound", "navigation", "entityType"), navigation, entityType);
        }

        /// <summary>
        /// The navigation properties '{navigation1}' and '{navigation2}' on entity type '{entityType}' are both backed by the same foreign key and point in the same direction. Each foreign key can have at most one navigation property and one inverse navigation property.
        /// </summary>
        internal static string MultipleNavigations
        {
            get { return GetString("MultipleNavigations"); }
        }

        /// <summary>
        /// The navigation properties '{navigation1}' and '{navigation2}' on entity type '{entityType}' are both backed by the same foreign key and point in the same direction. Each foreign key can have at most one navigation property and one inverse navigation property.
        /// </summary>
        internal static string FormatMultipleNavigations(object navigation1, object navigation2, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MultipleNavigations", "navigation1", "navigation2", "entityType"), navigation1, navigation2, entityType);
        }

        /// <summary>
        /// The number of properties specified for the foreign key {foreignKey} on entity type '{dependentType}' does not match the number of properties in the referenced key {referencedKey} on entity type '{principalType}'.
        /// </summary>
        internal static string ForeignKeyCountMismatch
        {
            get { return GetString("ForeignKeyCountMismatch"); }
        }

        /// <summary>
        /// The number of properties specified for the foreign key {foreignKey} on entity type '{dependentType}' does not match the number of properties in the referenced key {referencedKey} on entity type '{principalType}'.
        /// </summary>
        internal static string FormatForeignKeyCountMismatch(object foreignKey, object dependentType, object referencedKey, object principalType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ForeignKeyCountMismatch", "foreignKey", "dependentType", "referencedKey", "principalType"), foreignKey, dependentType, referencedKey, principalType);
        }

        /// <summary>
        /// The types of the properties specified for the foreign key {foreignKey} on entity type '{dependentType}' do not match the types of the properties in the referenced key on entity type '{principalType}'.
        /// </summary>
        internal static string ForeignKeyTypeMismatch
        {
            get { return GetString("ForeignKeyTypeMismatch"); }
        }

        /// <summary>
        /// The types of the properties specified for the foreign key {foreignKey} on entity type '{dependentType}' do not match the types of the properties in the referenced key on entity type '{principalType}'.
        /// </summary>
        internal static string FormatForeignKeyTypeMismatch(object foreignKey, object dependentType, object principalType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ForeignKeyTypeMismatch", "foreignKey", "dependentType", "principalType"), foreignKey, dependentType, principalType);
        }

        /// <summary>
        /// The type of navigation property '{navigation}' on entity type '{entityType}' is '{foundType}' which does not implement ICollection&lt;{targetType}&gt;. Collection navigation properties must implement ICollection&lt;&gt; of the target type.
        /// </summary>
        internal static string NavigationBadType
        {
            get { return GetString("NavigationBadType"); }
        }

        /// <summary>
        /// The type of navigation property '{navigation}' on entity type '{entityType}' is '{foundType}' which does not implement ICollection&lt;{targetType}&gt;. Collection navigation properties must implement ICollection&lt;&gt; of the target type.
        /// </summary>
        internal static string FormatNavigationBadType(object navigation, object entityType, object foundType, object targetType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NavigationBadType", "navigation", "entityType", "foundType", "targetType"), navigation, entityType, foundType, targetType);
        }

        /// <summary>
        /// The type of navigation property '{navigation}' on entity type '{entityType}' is '{foundType}' which is an array type.. Collection navigation properties cannot be arrays.
        /// </summary>
        internal static string NavigationArray
        {
            get { return GetString("NavigationArray"); }
        }

        /// <summary>
        /// The type of navigation property '{navigation}' on entity type '{entityType}' is '{foundType}' which is an array type.. Collection navigation properties cannot be arrays.
        /// </summary>
        internal static string FormatNavigationArray(object navigation, object entityType, object foundType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NavigationArray", "navigation", "entityType", "foundType"), navigation, entityType, foundType);
        }

        /// <summary>
        /// The navigation property '{navigation}' on entity type '{entityType}' does not have a getter.
        /// </summary>
        internal static string NavigationNoGetter
        {
            get { return GetString("NavigationNoGetter"); }
        }

        /// <summary>
        /// The navigation property '{navigation}' on entity type '{entityType}' does not have a getter.
        /// </summary>
        internal static string FormatNavigationNoGetter(object navigation, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NavigationNoGetter", "navigation", "entityType"), navigation, entityType);
        }

        /// <summary>
        /// The navigation property '{navigation}' on entity type '{entityType}' does not have a setter. Read-only collection navigation properties must be initialized before use.
        /// </summary>
        internal static string NavigationNoSetter
        {
            get { return GetString("NavigationNoSetter"); }
        }

        /// <summary>
        /// The navigation property '{navigation}' on entity type '{entityType}' does not have a setter. Read-only collection navigation properties must be initialized before use.
        /// </summary>
        internal static string FormatNavigationNoSetter(object navigation, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NavigationNoSetter", "navigation", "entityType"), navigation, entityType);
        }

        /// <summary>
        /// The type of navigation property '{navigation}' on entity type '{entityType}' is '{foundType}' for which it was not possible to create a concrete instance. Either initialize the property before use, add a public parameterless constructor to the type, or use a type which can be assigned a HashSet&lt;&gt; or List&lt;&gt;.
        /// </summary>
        internal static string NavigationCannotCreateType
        {
            get { return GetString("NavigationCannotCreateType"); }
        }

        /// <summary>
        /// The type of navigation property '{navigation}' on entity type '{entityType}' is '{foundType}' for which it was not possible to create a concrete instance. Either initialize the property before use, add a public parameterless constructor to the type, or use a type which can be assigned a HashSet&lt;&gt; or List&lt;&gt;.
        /// </summary>
        internal static string FormatNavigationCannotCreateType(object navigation, object entityType, object foundType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NavigationCannotCreateType", "navigation", "entityType", "foundType"), navigation, entityType, foundType);
        }

        /// <summary>
        /// The property '{property}' on entity type '{entityType}' is read-only and so cannot be modified or marked as modified.
        /// </summary>
        internal static string PropertyReadOnly
        {
            get { return GetString("PropertyReadOnly"); }
        }

        /// <summary>
        /// The property '{property}' on entity type '{entityType}' is read-only and so cannot be modified or marked as modified.
        /// </summary>
        internal static string FormatPropertyReadOnly(object property, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PropertyReadOnly", "property", "entityType"), property, entityType);
        }

        /// <summary>
        /// The property '{property}' on entity type '{entityType}' cannot be marked as read-write because it is part of a key. Key properties are always read-only.
        /// </summary>
        internal static string KeyPropertyMustBeReadOnly
        {
            get { return GetString("KeyPropertyMustBeReadOnly"); }
        }

        /// <summary>
        /// The property '{property}' on entity type '{entityType}' cannot be marked as read-write because it is part of a key. Key properties are always read-only.
        /// </summary>
        internal static string FormatKeyPropertyMustBeReadOnly(object property, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("KeyPropertyMustBeReadOnly", "property", "entityType"), property, entityType);
        }

        /// <summary>
        /// The foreign key {foreignKey} cannot be added to the entity type '{entityType}' because a foreign key on the same properties already exists.
        /// </summary>
        internal static string DuplicateForeignKey
        {
            get { return GetString("DuplicateForeignKey"); }
        }

        /// <summary>
        /// The foreign key {foreignKey} cannot be added to the entity type '{entityType}' because a foreign key on the same properties already exists.
        /// </summary>
        internal static string FormatDuplicateForeignKey(object foreignKey, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DuplicateForeignKey", "foreignKey", "entityType"), foreignKey, entityType);
        }

        /// <summary>
        /// The index {index} cannot be added to the entity type '{entityType}' because an index on the same properties already exists.
        /// </summary>
        internal static string DuplicateIndex
        {
            get { return GetString("DuplicateIndex"); }
        }

        /// <summary>
        /// The index {index} cannot be added to the entity type '{entityType}' because an index on the same properties already exists.
        /// </summary>
        internal static string FormatDuplicateIndex(object index, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DuplicateIndex", "index", "entityType"), index, entityType);
        }

        /// <summary>
        /// The key {key} cannot be added to the entity type '{entityType}' because a key on the same properties already exists.
        /// </summary>
        internal static string DuplicateKey
        {
            get { return GetString("DuplicateKey"); }
        }

        /// <summary>
        /// The key {key} cannot be added to the entity type '{entityType}' because a key on the same properties already exists.
        /// </summary>
        internal static string FormatDuplicateKey(object key, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DuplicateKey", "key", "entityType"), key, entityType);
        }

        /// <summary>
        /// The foreign key {foreignKey} on entity type '{entityType}' could not be found. Ensure that the foreign key been added to the entity type.
        /// </summary>
        internal static string ForeignKeyNotFound
        {
            get { return GetString("ForeignKeyNotFound"); }
        }

        /// <summary>
        /// The foreign key {foreignKey} on entity type '{entityType}' could not be found. Ensure that the foreign key been added to the entity type.
        /// </summary>
        internal static string FormatForeignKeyNotFound(object foreignKey, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ForeignKeyNotFound", "foreignKey", "entityType"), foreignKey, entityType);
        }

        /// <summary>
        /// The index {index} on entity type '{entityType}' could not be found. Ensure that the index been added to the entity type.
        /// </summary>
        internal static string IndexNotFound
        {
            get { return GetString("IndexNotFound"); }
        }

        /// <summary>
        /// The index {index} on entity type '{entityType}' could not be found. Ensure that the index been added to the entity type.
        /// </summary>
        internal static string FormatIndexNotFound(object index, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("IndexNotFound", "index", "entityType"), index, entityType);
        }

        /// <summary>
        /// The key {key} on entity type '{entityType}' could not be found. Ensure that the key been added to the entity type.
        /// </summary>
        internal static string KeyNotFound
        {
            get { return GetString("KeyNotFound"); }
        }

        /// <summary>
        /// The key {key} on entity type '{entityType}' could not be found. Ensure that the key been added to the entity type.
        /// </summary>
        internal static string FormatKeyNotFound(object key, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("KeyNotFound", "key", "entityType"), key, entityType);
        }

        /// <summary>
        /// The navigation property '{navigation}' cannot be added to entity type '{entityType}' because the target entity type '{targetType}' is defined in shadow state and navigations properties cannot point to shadow state entities.
        /// </summary>
        internal static string NavigationToShadowEntity
        {
            get { return GetString("NavigationToShadowEntity"); }
        }

        /// <summary>
        /// The navigation property '{navigation}' cannot be added to entity type '{entityType}' because the target entity type '{targetType}' is defined in shadow state and navigations properties cannot point to shadow state entities.
        /// </summary>
        internal static string FormatNavigationToShadowEntity(object navigation, object entityType, object targetType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NavigationToShadowEntity", "navigation", "entityType", "targetType"), navigation, entityType, targetType);
        }

        /// <summary>
        /// The collection argument '{argumentName}' must not contain any null references.
        /// </summary>
        internal static string CollectionArgumentContainsNulls
        {
            get { return GetString("CollectionArgumentContainsNulls"); }
        }

        /// <summary>
        /// The collection argument '{argumentName}' must not contain any null references.
        /// </summary>
        internal static string FormatCollectionArgumentContainsNulls(object argumentName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CollectionArgumentContainsNulls", "argumentName"), argumentName);
        }

        /// <summary>
        /// The specified type '{type}' is invalid. It should be either the dependent type '{dependentType}' or the principal type '{principalType}'.
        /// </summary>
        internal static string EntityTypeNotInRelationship
        {
            get { return GetString("EntityTypeNotInRelationship"); }
        }

        /// <summary>
        /// The specified type '{type}' is invalid. It should be either the dependent type '{dependentType}' or the principal type '{principalType}'.
        /// </summary>
        internal static string FormatEntityTypeNotInRelationship(object type, object dependentType, object principalType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("EntityTypeNotInRelationship", "type", "dependentType", "principalType"), type, dependentType, principalType);
        }

        /// <summary>
        /// The entity type '{entityType}' cannot be added to the model because an entity with the same name already exists.
        /// </summary>
        internal static string DuplicateEntityType
        {
            get { return GetString("DuplicateEntityType"); }
        }

        /// <summary>
        /// The entity type '{entityType}' cannot be added to the model because an entity with the same name already exists.
        /// </summary>
        internal static string FormatDuplicateEntityType(object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DuplicateEntityType", "entityType"), entityType);
        }

        /// <summary>
        /// Annotations of type '{type}' are not supported. Only common simple .NET types are currently supported.
        /// </summary>
        internal static string UnsupportedAnnotationType
        {
            get { return GetString("UnsupportedAnnotationType"); }
        }

        /// <summary>
        /// Annotations of type '{type}' are not supported. Only common simple .NET types are currently supported.
        /// </summary>
        internal static string FormatUnsupportedAnnotationType(object type)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnsupportedAnnotationType", "type"), type);
        }

        /// <summary>
        /// The annotation '{annotation}' cannot be added because an annotation with the same name already exists.
        /// </summary>
        internal static string DuplicateAnnotation
        {
            get { return GetString("DuplicateAnnotation"); }
        }

        /// <summary>
        /// The annotation '{annotation}' cannot be added because an annotation with the same name already exists.
        /// </summary>
        internal static string FormatDuplicateAnnotation(object annotation)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DuplicateAnnotation", "annotation"), annotation);
        }

        /// <summary>
        /// The annotation '{annotation}' was not found. Ensure that the annotation has been added.
        /// </summary>
        internal static string AnnotationNotFound
        {
            get { return GetString("AnnotationNotFound"); }
        }

        /// <summary>
        /// The annotation '{annotation}' was not found. Ensure that the annotation has been added.
        /// </summary>
        internal static string FormatAnnotationNotFound(object annotation)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AnnotationNotFound", "annotation"), annotation);
        }

        /// <summary>
        /// The Include operator is not implemented by the current data store provider.
        /// </summary>
        internal static string IncludeNotImplemented
        {
            get { return GetString("IncludeNotImplemented"); }
        }

        /// <summary>
        /// The Include operator is not implemented by the current data store provider.
        /// </summary>
        internal static string FormatIncludeNotImplemented()
        {
            return GetString("IncludeNotImplemented");
        }

        /// <summary>
        /// The expression '{expression}' passed to the Include operator could not be bound. Only single-level navigation expressions are supported. 
        /// </summary>
        internal static string IncludeNonBindableExpression
        {
            get { return GetString("IncludeNonBindableExpression"); }
        }

        /// <summary>
        /// The expression '{expression}' passed to the Include operator could not be bound. Only single-level navigation expressions are supported. 
        /// </summary>
        internal static string FormatIncludeNonBindableExpression(object expression)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("IncludeNonBindableExpression", "expression"), expression);
        }

        /// <summary>
        /// Compiling query model: '{queryModel}'
        /// </summary>
        internal static string LogCompilingQueryModel
        {
            get { return GetString("LogCompilingQueryModel"); }
        }

        /// <summary>
        /// Compiling query model: '{queryModel}'
        /// </summary>
        internal static string FormatLogCompilingQueryModel(object queryModel)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LogCompilingQueryModel", "queryModel"), queryModel);
        }

        /// <summary>
        /// Optimized query model: '{queryModel}'
        /// </summary>
        internal static string LogOptimizedQueryModel
        {
            get { return GetString("LogOptimizedQueryModel"); }
        }

        /// <summary>
        /// Optimized query model: '{queryModel}'
        /// </summary>
        internal static string FormatLogOptimizedQueryModel(object queryModel)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LogOptimizedQueryModel", "queryModel"), queryModel);
        }

        /// <summary>
        /// Compiled query expression.
        /// </summary>
        internal static string LogCompiledQueryFunction
        {
            get { return GetString("LogCompiledQueryFunction"); }
        }

        /// <summary>
        /// Compiled query expression.
        /// </summary>
        internal static string FormatLogCompiledQueryFunction()
        {
            return GetString("LogCompiledQueryFunction");
        }

        /// <summary>
        /// Including navigation: '{navigation}'
        /// </summary>
        internal static string LogIncludingNavigation
        {
            get { return GetString("LogIncludingNavigation"); }
        }

        /// <summary>
        /// Including navigation: '{navigation}'
        /// </summary>
        internal static string FormatLogIncludingNavigation(object navigation)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LogIncludingNavigation", "navigation"), navigation);
        }

        /// <summary>
        /// Tracking query sources: [{querySources}]
        /// </summary>
        internal static string LogTrackingQuerySources
        {
            get { return GetString("LogTrackingQuerySources"); }
        }

        /// <summary>
        /// Tracking query sources: [{querySources}]
        /// </summary>
        internal static string FormatLogTrackingQuerySources(object querySources)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LogTrackingQuerySources", "querySources"), querySources);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
