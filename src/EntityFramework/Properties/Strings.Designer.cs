// <auto-generated />
namespace Microsoft.Data.Entity
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Strings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("EntityFramework.Strings", typeof(Strings).GetTypeInfo().Assembly);

        /// <summary>
        /// The string argument '{argumentName}' cannot be empty.
        /// </summary>
        internal static string ArgumentIsEmpty
        {
            get { return GetString("ArgumentIsEmpty"); }
        }

        /// <summary>
        /// The string argument '{argumentName}' cannot be empty.
        /// </summary>
        internal static string FormatArgumentIsEmpty(object argumentName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ArgumentIsEmpty", "argumentName"), argumentName);
        }

        /// <summary>
        /// A circular model foreign key dependency was detected: {cycle}.
        /// </summary>
        internal static string CircularDependency
        {
            get { return GetString("CircularDependency"); }
        }

        /// <summary>
        /// A circular model foreign key dependency was detected: {cycle}.
        /// </summary>
        internal static string FormatCircularDependency(object cycle)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CircularDependency", "cycle"), cycle);
        }

        /// <summary>
        /// The value provided for argument '{argumentName}' must be a valid value of enum type '{enumType}'.
        /// </summary>
        internal static string InvalidEnumValue
        {
            get { return GetString("InvalidEnumValue"); }
        }

        /// <summary>
        /// The value provided for argument '{argumentName}' must be a valid value of enum type '{enumType}'.
        /// </summary>
        internal static string FormatInvalidEnumValue(object argumentName, object enumType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidEnumValue", "argumentName", "enumType"), argumentName, enumType);
        }

        /// <summary>
        /// The properties expression '{expression}' is not valid. The expression should represent a property access: 't =&gt; t.MyProperty'. When specifying multiple properties use an anonymous type: 't =&gt; new {{ t.MyProperty1, t.MyProperty2 }}'.
        /// </summary>
        internal static string InvalidPropertiesExpression
        {
            get { return GetString("InvalidPropertiesExpression"); }
        }

        /// <summary>
        /// The properties expression '{expression}' is not valid. The expression should represent a property access: 't =&gt; t.MyProperty'. When specifying multiple properties use an anonymous type: 't =&gt; new {{ t.MyProperty1, t.MyProperty2 }}'.
        /// </summary>
        internal static string FormatInvalidPropertiesExpression(object expression)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidPropertiesExpression", "expression"), expression);
        }

        /// <summary>
        /// The expression '{expression}' is not a valid property expression. The expression should represent a property access: 't =&gt; t.MyProperty'.
        /// </summary>
        internal static string InvalidPropertyExpression
        {
            get { return GetString("InvalidPropertyExpression"); }
        }

        /// <summary>
        /// The expression '{expression}' is not a valid property expression. The expression should represent a property access: 't =&gt; t.MyProperty'.
        /// </summary>
        internal static string FormatInvalidPropertyExpression(object expression)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidPropertyExpression", "expression"), expression);
        }

        /// <summary>
        /// The instance of entity type '{entityType}' cannot be tracked because another instance of this type with the same key is already being tracked. For new entities consider using an IIdentityGenerator to generate unique key values.
        /// </summary>
        internal static string IdentityConflict
        {
            get { return GetString("IdentityConflict"); }
        }

        /// <summary>
        /// The instance of entity type '{entityType}' cannot be tracked because another instance of this type with the same key is already being tracked. For new entities consider using an IIdentityGenerator to generate unique key values.
        /// </summary>
        internal static string FormatIdentityConflict(object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("IdentityConflict", "entityType"), entityType);
        }

        /// <summary>
        /// The instance of entity type '{entityType}' cannot be tracked because it has a null primary key. Either set the key explicitly or consider using an IValueGenerator to generate unique key values.
        /// </summary>
        internal static string NullPrimaryKey
        {
            get { return GetString("NullPrimaryKey"); }
        }

        /// <summary>
        /// The instance of entity type '{entityType}' cannot be tracked because it has a null primary key. Either set the key explicitly or consider using an IValueGenerator to generate unique key values.
        /// </summary>
        internal static string FormatNullPrimaryKey(object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NullPrimaryKey", "entityType"), entityType);
        }

        /// <summary>
        /// Cannot start tracking StateEntry for entity type '{entityType}' because it was created by a different StateManager instance.
        /// </summary>
        internal static string WrongStateManager
        {
            get { return GetString("WrongStateManager"); }
        }

        /// <summary>
        /// Cannot start tracking StateEntry for entity type '{entityType}' because it was created by a different StateManager instance.
        /// </summary>
        internal static string FormatWrongStateManager(object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("WrongStateManager", "entityType"), entityType);
        }

        /// <summary>
        /// Cannot start tracking StateEntry for entity type '{entityType}' because another StateEntry is already tracking the same entity.
        /// </summary>
        internal static string MultipleStateEntries
        {
            get { return GetString("MultipleStateEntries"); }
        }

        /// <summary>
        /// Cannot start tracking StateEntry for entity type '{entityType}' because another StateEntry is already tracking the same entity.
        /// </summary>
        internal static string FormatMultipleStateEntries(object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MultipleStateEntries", "entityType"), entityType);
        }

        /// <summary>
        /// The entity type '{entityType}' was not found. Ensure that the entity type '{entityType}' has been added to the model.
        /// </summary>
        internal static string EntityTypeNotFound
        {
            get { return GetString("EntityTypeNotFound"); }
        }

        /// <summary>
        /// The entity type '{entityType}' was not found. Ensure that the entity type '{entityType}' has been added to the model.
        /// </summary>
        internal static string FormatEntityTypeNotFound(object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("EntityTypeNotFound", "entityType"), entityType);
        }

        /// <summary>
        /// The property '{property}' on entity type '{entityType}' could not be found. Ensure that the property exists and has been included in the model.
        /// </summary>
        internal static string PropertyNotFound
        {
            get { return GetString("PropertyNotFound"); }
        }

        /// <summary>
        /// The property '{property}' on entity type '{entityType}' could not be found. Ensure that the property exists and has been included in the model.
        /// </summary>
        internal static string FormatPropertyNotFound(object property, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PropertyNotFound", "property", "entityType"), property, entityType);
        }

        /// <summary>
        /// Sequence contains no elements.
        /// </summary>
        internal static string EmptySequence
        {
            get { return GetString("EmptySequence"); }
        }

        /// <summary>
        /// Sequence contains no elements.
        /// </summary>
        internal static string FormatEmptySequence()
        {
            return GetString("EmptySequence");
        }

        /// <summary>
        /// Sequence contains more than one element.
        /// </summary>
        internal static string MoreThanOneElement
        {
            get { return GetString("MoreThanOneElement"); }
        }

        /// <summary>
        /// Sequence contains more than one element.
        /// </summary>
        internal static string FormatMoreThanOneElement()
        {
            return GetString("MoreThanOneElement");
        }

        /// <summary>
        /// Sequence contains more than one matching element.
        /// </summary>
        internal static string MoreThanOneMatch
        {
            get { return GetString("MoreThanOneMatch"); }
        }

        /// <summary>
        /// Sequence contains more than one matching element.
        /// </summary>
        internal static string FormatMoreThanOneMatch()
        {
            return GetString("MoreThanOneMatch");
        }

        /// <summary>
        /// Sequence contains no matching element.
        /// </summary>
        internal static string NoMatch
        {
            get { return GetString("NoMatch"); }
        }

        /// <summary>
        /// Sequence contains no matching element.
        /// </summary>
        internal static string FormatNoMatch()
        {
            return GetString("NoMatch");
        }

        /// <summary>
        /// The collection argument '{argumentName}' must contain at least one element.
        /// </summary>
        internal static string CollectionArgumentIsEmpty
        {
            get { return GetString("CollectionArgumentIsEmpty"); }
        }

        /// <summary>
        /// The collection argument '{argumentName}' must contain at least one element.
        /// </summary>
        internal static string FormatCollectionArgumentIsEmpty(object argumentName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CollectionArgumentIsEmpty", "argumentName"), argumentName);
        }

        /// <summary>
        /// The properties provided for the argument '{argumentName}' are declared on different entity types.
        /// </summary>
        internal static string InconsistentEntityType
        {
            get { return GetString("InconsistentEntityType"); }
        }

        /// <summary>
        /// The properties provided for the argument '{argumentName}' are declared on different entity types.
        /// </summary>
        internal static string FormatInconsistentEntityType(object argumentName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InconsistentEntityType", "argumentName"), argumentName);
        }

        /// <summary>
        /// The entity type '{entityType}' requires a key to be defined.
        /// </summary>
        internal static string EntityRequiresKey
        {
            get { return GetString("EntityRequiresKey"); }
        }

        /// <summary>
        /// The entity type '{entityType}' requires a key to be defined.
        /// </summary>
        internal static string FormatEntityRequiresKey(object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("EntityRequiresKey", "entityType"), entityType);
        }

        /// <summary>
        /// The specified key properties are not declared on the entity type '{entityType}'. Ensure key properties are declared on the target entity type.
        /// </summary>
        internal static string KeyPropertiesWrongEntity
        {
            get { return GetString("KeyPropertiesWrongEntity"); }
        }

        /// <summary>
        /// The specified key properties are not declared on the entity type '{entityType}'. Ensure key properties are declared on the target entity type.
        /// </summary>
        internal static string FormatKeyPropertiesWrongEntity(object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("KeyPropertiesWrongEntity", "entityType"), entityType);
        }

        /// <summary>
        /// The specified foreign key properties are not declared on the entity type '{entityType}'. Ensure foreign key properties are declared on the target entity type.
        /// </summary>
        internal static string ForeignKeyPropertiesWrongEntity
        {
            get { return GetString("ForeignKeyPropertiesWrongEntity"); }
        }

        /// <summary>
        /// The specified foreign key properties are not declared on the entity type '{entityType}'. Ensure foreign key properties are declared on the target entity type.
        /// </summary>
        internal static string FormatForeignKeyPropertiesWrongEntity(object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ForeignKeyPropertiesWrongEntity", "entityType"), entityType);
        }

        /// <summary>
        /// The specified index properties are not declared on the entity type '{entityType}'. Ensure index properties are declared on the target entity type.
        /// </summary>
        internal static string IndexPropertiesWrongEntity
        {
            get { return GetString("IndexPropertiesWrongEntity"); }
        }

        /// <summary>
        /// The specified index properties are not declared on the entity type '{entityType}'. Ensure index properties are declared on the target entity type.
        /// </summary>
        internal static string FormatIndexPropertiesWrongEntity(object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("IndexPropertiesWrongEntity", "entityType"), entityType);
        }

        /// <summary>
        /// The source IQueryable doesn't implement IAsyncEnumerable&lt;{genericParameter}&gt;. Only sources that implement IAsyncEnumerable can be used for Entity Framework asynchronous operations.
        /// </summary>
        internal static string IQueryableNotAsync
        {
            get { return GetString("IQueryableNotAsync"); }
        }

        /// <summary>
        /// The source IQueryable doesn't implement IAsyncEnumerable&lt;{genericParameter}&gt;. Only sources that implement IAsyncEnumerable can be used for Entity Framework asynchronous operations.
        /// </summary>
        internal static string FormatIQueryableNotAsync(object genericParameter)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("IQueryableNotAsync", "genericParameter"), genericParameter);
        }

        /// <summary>
        /// The provider for the source IQueryable doesn't implement IAsyncQueryProvider. Only providers that implement IEntityQueryProvider can be used for Entity Framework asynchronous operations.
        /// </summary>
        internal static string IQueryableProviderNotAsync
        {
            get { return GetString("IQueryableProviderNotAsync"); }
        }

        /// <summary>
        /// The provider for the source IQueryable doesn't implement IAsyncQueryProvider. Only providers that implement IEntityQueryProvider can be used for Entity Framework asynchronous operations.
        /// </summary>
        internal static string FormatIQueryableProviderNotAsync()
        {
            return GetString("IQueryableProviderNotAsync");
        }

        /// <summary>
        /// Lazy original value tracking cannot be turned on for entity type '{entityType}'. Entities that do not implement both INotifyPropertyChanging and INotifyPropertyChanged require original values to be stored eagerly in order to correct detect changes made to entities.
        /// </summary>
        internal static string EagerOriginalValuesRequired
        {
            get { return GetString("EagerOriginalValuesRequired"); }
        }

        /// <summary>
        /// Lazy original value tracking cannot be turned on for entity type '{entityType}'. Entities that do not implement both INotifyPropertyChanging and INotifyPropertyChanged require original values to be stored eagerly in order to correct detect changes made to entities.
        /// </summary>
        internal static string FormatEagerOriginalValuesRequired(object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("EagerOriginalValuesRequired", "entityType"), entityType);
        }

        /// <summary>
        /// The original value for property '{property}' of entity type '{entityType}' cannot be accessed because it is not being tracked. To access all original values set 'UseLazyOriginalValues' to false on the entity type.
        /// </summary>
        internal static string OriginalValueNotTracked
        {
            get { return GetString("OriginalValueNotTracked"); }
        }

        /// <summary>
        /// The original value for property '{property}' of entity type '{entityType}' cannot be accessed because it is not being tracked. To access all original values set 'UseLazyOriginalValues' to false on the entity type.
        /// </summary>
        internal static string FormatOriginalValueNotTracked(object property, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("OriginalValueNotTracked", "property", "entityType"), property, entityType);
        }

        /// <summary>
        /// The property '{entityType}.{property}' is annotated with backing field '{field}' but that field cannot be found.
        /// </summary>
        internal static string MissingBackingField
        {
            get { return GetString("MissingBackingField"); }
        }

        /// <summary>
        /// The property '{entityType}.{property}' is annotated with backing field '{field}' but that field cannot be found.
        /// </summary>
        internal static string FormatMissingBackingField(object entityType, object property, object field)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MissingBackingField", "entityType", "property", "field"), entityType, property, field);
        }

        /// <summary>
        /// The annotated backing field '{field}' of type '{fieldType}' cannot be used for the property '{entityType}.{property}' of type '{propertyType}'. Only backing fields of types that are assignable from the property type can be used.
        /// </summary>
        internal static string BadBackingFieldType
        {
            get { return GetString("BadBackingFieldType"); }
        }

        /// <summary>
        /// The annotated backing field '{field}' of type '{fieldType}' cannot be used for the property '{entityType}.{property}' of type '{propertyType}'. Only backing fields of types that are assignable from the property type can be used.
        /// </summary>
        internal static string FormatBadBackingFieldType(object field, object fieldType, object entityType, object property, object propertyType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("BadBackingFieldType", "field", "fieldType", "entityType", "property", "propertyType"), field, fieldType, entityType, property, propertyType);
        }

        /// <summary>
        /// No backing field could be discovered for property '{entityType}.{property}' and the property does not have a setter. Either use a backing field name that can be matched by convention, annotate the property with a backing field, or define a property setter.
        /// </summary>
        internal static string NoFieldOrSetter
        {
            get { return GetString("NoFieldOrSetter"); }
        }

        /// <summary>
        /// No backing field could be discovered for property '{entityType}.{property}' and the property does not have a setter. Either use a backing field name that can be matched by convention, annotate the property with a backing field, or define a property setter.
        /// </summary>
        internal static string FormatNoFieldOrSetter(object entityType, object property)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NoFieldOrSetter", "entityType", "property"), entityType, property);
        }

        /// <summary>
        /// The CLR entity materializer cannot be used for entity type '{entityType}' because it is a shadow-state entity type.  Materialization to a CLR type is only possible for entity types that have a corresponding CLR type.
        /// </summary>
        internal static string NoClrType
        {
            get { return GetString("NoClrType"); }
        }

        /// <summary>
        /// The CLR entity materializer cannot be used for entity type '{entityType}' because it is a shadow-state entity type.  Materialization to a CLR type is only possible for entity types that have a corresponding CLR type.
        /// </summary>
        internal static string FormatNoClrType(object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NoClrType", "entityType"), entityType);
        }

        /// <summary>
        /// The data stores {storeNames}are configured. A context can only be configured to use a single data store.
        /// </summary>
        internal static string MultipleDataStoresConfigured
        {
            get { return GetString("MultipleDataStoresConfigured"); }
        }

        /// <summary>
        /// The data stores {storeNames}are configured. A context can only be configured to use a single data store.
        /// </summary>
        internal static string FormatMultipleDataStoresConfigured(object storeNames)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MultipleDataStoresConfigured", "storeNames"), storeNames);
        }

        /// <summary>
        /// No data stores are configured. Configure a data store using OnConfiguring or by creating an ImmutableDbContextOptions with a data store configured and passing it to the context.
        /// </summary>
        internal static string NoDataStoreConfigured
        {
            get { return GetString("NoDataStoreConfigured"); }
        }

        /// <summary>
        /// No data stores are configured. Configure a data store using OnConfiguring or by creating an ImmutableDbContextOptions with a data store configured and passing it to the context.
        /// </summary>
        internal static string FormatNoDataStoreConfigured()
        {
            return GetString("NoDataStoreConfigured");
        }

        /// <summary>
        /// No data stores are available. Ensure that data store services are added inside the call to AddEntityFramework on your ServiceCollection.
        /// </summary>
        internal static string NoDataStoreService
        {
            get { return GetString("NoDataStoreService"); }
        }

        /// <summary>
        /// No data stores are available. Ensure that data store services are added inside the call to AddEntityFramework on your ServiceCollection.
        /// </summary>
        internal static string FormatNoDataStoreService()
        {
            return GetString("NoDataStoreService");
        }

        /// <summary>
        /// The data stores {storeNames}are available. A context can only be configured to use a single data store. Configure a data store using OnConfiguring or by creating an ImmutableDbContextOptions with a data store configured and passing it to the context.
        /// </summary>
        internal static string MultipleDataStoresAvailable
        {
            get { return GetString("MultipleDataStoresAvailable"); }
        }

        /// <summary>
        /// The data stores {storeNames}are available. A context can only be configured to use a single data store. Configure a data store using OnConfiguring or by creating an ImmutableDbContextOptions with a data store configured and passing it to the context.
        /// </summary>
        internal static string FormatMultipleDataStoresAvailable(object storeNames)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MultipleDataStoresAvailable", "storeNames"), storeNames);
        }

        /// <summary>
        /// Cannot change the ImmutableDbContextOptions by calling '{memberName}' because it is locked. Use ImmutableDbContextOptionsBuilder to create ImmutableDbContextOptionss.
        /// </summary>
        internal static string EntityConfigurationLocked
        {
            get { return GetString("EntityConfigurationLocked"); }
        }

        /// <summary>
        /// Cannot change the ImmutableDbContextOptions by calling '{memberName}' because it is locked. Use ImmutableDbContextOptionsBuilder to create ImmutableDbContextOptionss.
        /// </summary>
        internal static string FormatEntityConfigurationLocked(object memberName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("EntityConfigurationLocked", "memberName"), memberName);
        }

        /// <summary>
        /// Multiple potential primary key properties named '{property}' but differing only by case were found on entity type '{entityType}'. Configure the primary key explicitly using the SetKey fluent API.
        /// </summary>
        internal static string MultiplePropertiesMatchedAsKeys
        {
            get { return GetString("MultiplePropertiesMatchedAsKeys"); }
        }

        /// <summary>
        /// Multiple potential primary key properties named '{property}' but differing only by case were found on entity type '{entityType}'. Configure the primary key explicitly using the SetKey fluent API.
        /// </summary>
        internal static string FormatMultiplePropertiesMatchedAsKeys(object property, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MultiplePropertiesMatchedAsKeys", "property", "entityType"), property, entityType);
        }

        /// <summary>
        /// No {generator} value generator has been configured for property '{entityType}.{propertyName}'. To use value generation for properties of type '{propertyType}' the data store must configure an appropriate value generator.
        /// </summary>
        internal static string NoValueGenerator
        {
            get { return GetString("NoValueGenerator"); }
        }

        /// <summary>
        /// No {generator} value generator has been configured for property '{entityType}.{propertyName}'. To use value generation for properties of type '{propertyType}' the data store must configure an appropriate value generator.
        /// </summary>
        internal static string FormatNoValueGenerator(object generator, object entityType, object propertyName, object propertyType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NoValueGenerator", "generator", "entityType", "propertyName", "propertyType"), generator, entityType, propertyName, propertyType);
        }

        /// <summary>
        /// A property with the storage name '{property}' on entity type '{entityType}' could not be found. Ensure that the property exists, has been included in the model, and has been configured with storage name specified.
        /// </summary>
        internal static string PropertyWithStorageNameNotFound
        {
            get { return GetString("PropertyWithStorageNameNotFound"); }
        }

        /// <summary>
        /// A property with the storage name '{property}' on entity type '{entityType}' could not be found. Ensure that the property exists, has been included in the model, and has been configured with storage name specified.
        /// </summary>
        internal static string FormatPropertyWithStorageNameNotFound(object property, object entityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PropertyWithStorageNameNotFound", "property", "entityType"), property, entityType);
        }

        /// <summary>
        /// CurrentValues are always in sync with the entity state.
        /// </summary>
        internal static string CurrentValuesAlwaysInSync
        {
            get { return GetString("CurrentValuesAlwaysInSync"); }
        }

        /// <summary>
        /// CurrentValues are always in sync with the entity state.
        /// </summary>
        internal static string FormatCurrentValuesAlwaysInSync()
        {
            return GetString("CurrentValuesAlwaysInSync");
        }

        /// <summary>
        /// An error occured while running a data store operation. See InnerException for details.
        /// </summary>
        internal static string DataStoreException
        {
            get { return GetString("DataStoreException"); }
        }

        /// <summary>
        /// An error occured while running a data store operation. See InnerException for details.
        /// </summary>
        internal static string FormatDataStoreException()
        {
            return GetString("DataStoreException");
        }

        /// <summary>
        /// {0} The exception is already a DataStoreException (or derives from DataStoreException). Re-throwing the original exception.
        /// </summary>
        internal static string LogDataStoreExceptionRethrow
        {
            get { return GetString("LogDataStoreExceptionRethrow"); }
        }

        /// <summary>
        /// {0} The exception is already a DataStoreException (or derives from DataStoreException). Re-throwing the original exception.
        /// </summary>
        internal static string FormatLogDataStoreExceptionRethrow(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LogDataStoreExceptionRethrow"), p0);
        }

        /// <summary>
        /// {0} Throwing a new DataStoreException with InnerException set to the original exception.
        /// </summary>
        internal static string LogDataStoreExceptionWrap
        {
            get { return GetString("LogDataStoreExceptionWrap"); }
        }

        /// <summary>
        /// {0} Throwing a new DataStoreException with InnerException set to the original exception.
        /// </summary>
        internal static string FormatLogDataStoreExceptionWrap(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LogDataStoreExceptionWrap"), p0);
        }

        /// <summary>
        /// An exception occurred while executing a query.
        /// </summary>
        internal static string LogExceptionDuringQueryExecution
        {
            get { return GetString("LogExceptionDuringQueryExecution"); }
        }

        /// <summary>
        /// An exception occurred while executing a query.
        /// </summary>
        internal static string FormatLogExceptionDuringQueryExecution()
        {
            return GetString("LogExceptionDuringQueryExecution");
        }

        /// <summary>
        /// An exception occurred while iterating results of a query.
        /// </summary>
        internal static string LogExceptionDuringQueryIteration
        {
            get { return GetString("LogExceptionDuringQueryIteration"); }
        }

        /// <summary>
        /// An exception occurred while iterating results of a query.
        /// </summary>
        internal static string FormatLogExceptionDuringQueryIteration()
        {
            return GetString("LogExceptionDuringQueryIteration");
        }

        /// <summary>
        /// An exception occurred while saving changes.
        /// </summary>
        internal static string LogExceptionDuringSaveChanges
        {
            get { return GetString("LogExceptionDuringSaveChanges"); }
        }

        /// <summary>
        /// An exception occurred while saving changes.
        /// </summary>
        internal static string FormatLogExceptionDuringSaveChanges()
        {
            return GetString("LogExceptionDuringSaveChanges");
        }

        /// <summary>
        /// The Property&lt;T&gt; extension method may only be used within LINQ queries.
        /// </summary>
        internal static string PropertyExtensionInvoked
        {
            get { return GetString("PropertyExtensionInvoked"); }
        }

        /// <summary>
        /// The Property&lt;T&gt; extension method may only be used within LINQ queries.
        /// </summary>
        internal static string FormatPropertyExtensionInvoked()
        {
            return GetString("PropertyExtensionInvoked");
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
