<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <PackagesTargetsFile>$(MSBuildProjectDirectory)\$(IntermediateOutputPath)Packages.targets</PackagesTargetsFile>
    <PackagesFolder>$(SolutionDir)packages</PackagesFolder>
    <BuildDependsOn>WritePackageReferences;$(BuildDependsOn)</BuildDependsOn>
  </PropertyGroup>
  <ItemDefinitionGroup>
    <PackageReference>
      <Visible>False</Visible>
      <TargetFramework>net45</TargetFramework>
      <Assemblies />
    </PackageReference>
  </ItemDefinitionGroup>
  <UsingTask
    TaskName="WritePackageReferences"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <TargetsFile ParameterType="System.String" Required="true" />
      <PackageReferences ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <PackagesFolder ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        if (!Directory.Exists(PackagesFolder))
        {
            Log.LogError("No packages found. Run 'kpm restore' and try again.");

            return false;
        }

        using (var writer = new StreamWriter(TargetsFile, append: false))
        {
            writer.WriteLine("<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>");
            writer.WriteLine("  <ItemGroup>");

            var installedPackages = Directory.EnumerateDirectories(PackagesFolder).Select(d => Path.GetFileName(d))
                .OrderByDescending(p => p).ToArray();
            foreach (var package in PackageReferences)
            {
                var id = package.ItemSpec;
                var targetFramework = package.GetMetadata("TargetFramework");
                var assemblies = package.GetMetadata("Assemblies");
                if (string.IsNullOrEmpty(assemblies))
                  assemblies = id;

                var latestVersion = installedPackages.FirstOrDefault(
                    p => p.StartsWith(id) && Char.IsDigit(p[id.Length + 1]));
                if (latestVersion == null)
                {
                    Log.LogError("Package '{0}' not found. Run 'kpm restore' and try again.", id);

                    continue;
                }

                foreach (var assembly in assemblies.Split(';'))
                {
                    var hintPath = Path.Combine(
                        PackagesFolder,
                        latestVersion,
                        "lib",
                        targetFramework,
                        assembly + ".dll");

                    writer.WriteLine("    <Reference Include='{0}'>", assembly);
                    writer.WriteLine("      <HintPath>{0}</HintPath>", hintPath);
                    writer.WriteLine("    </Reference>");
                }
            }

            writer.WriteLine("  </ItemGroup>");
            writer.WriteLine("</Project>");
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>
  <Target Name="WritePackageReferences">
    <WritePackageReferences
      TargetsFile="$(PackagesTargetsFile)"
      PackageReferences="@(PackageReference)"
      PackagesFolder="$(PackagesFolder)" />
  </Target>
  <Import Project="$(PackagesTargetsFile)" Condition="Exists($(PackagesTargetsFile))" />
</Project>
