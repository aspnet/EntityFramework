using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace E2ETest.Namespace
{
    public partial class SqlServerReverseEngineerTestE2EContext : DbContext
    {
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            #warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
            optionsBuilder.UseSqlServer(@"{{connectionString}}");
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AllDataTypes>(entity =>
            {
                entity.Property(e => e.BigintColumn).HasColumnName("bigintColumn");

                entity.Property(e => e.Binary111Column)
                    .HasColumnName("binary111Column")
                    .HasColumnType("binary(111)");

                entity.Property(e => e.BinaryColumn)
                    .HasColumnName("binaryColumn")
                    .HasColumnType("binary(1)");

                entity.Property(e => e.BinaryVarying133Column)
                    .HasColumnName("binaryVarying133Column")
                    .HasMaxLength(133);

                entity.Property(e => e.BinaryVaryingColumn)
                    .HasColumnName("binaryVaryingColumn")
                    .HasMaxLength(1);

                entity.Property(e => e.BinaryVaryingMaxColumn).HasColumnName("binaryVaryingMaxColumn");

                entity.Property(e => e.BitColumn).HasColumnName("bitColumn");

                entity.Property(e => e.Char10Column)
                    .HasColumnName("char10Column")
                    .HasColumnType("char(10)");

                entity.Property(e => e.CharColumn)
                    .HasColumnName("charColumn")
                    .HasColumnType("char(1)");

                entity.Property(e => e.CharVarying144Column)
                    .HasColumnName("charVarying144Column")
                    .HasColumnType("varchar(144)");

                entity.Property(e => e.CharVaryingColumn)
                    .HasColumnName("charVaryingColumn")
                    .HasColumnType("varchar(1)");

                entity.Property(e => e.CharVaryingMaxColumn)
                    .HasColumnName("charVaryingMaxColumn")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.Character155Column)
                    .HasColumnName("character155Column")
                    .HasColumnType("char(155)");

                entity.Property(e => e.CharacterColumn)
                    .HasColumnName("characterColumn")
                    .HasColumnType("char(1)");

                entity.Property(e => e.CharacterVarying166Column)
                    .HasColumnName("characterVarying166Column")
                    .HasColumnType("varchar(166)");

                entity.Property(e => e.CharacterVaryingColumn)
                    .HasColumnName("characterVaryingColumn")
                    .HasColumnType("varchar(1)");

                entity.Property(e => e.CharacterVaryingMaxColumn)
                    .HasColumnName("characterVaryingMaxColumn")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.DateColumn)
                    .HasColumnName("dateColumn")
                    .HasColumnType("date");

                entity.Property(e => e.Datetime24Column)
                    .HasColumnName("datetime24Column")
                    .HasColumnType("datetime2(4)");

                entity.Property(e => e.Datetime2Column).HasColumnName("datetime2Column");

                entity.Property(e => e.DatetimeColumn)
                    .HasColumnName("datetimeColumn")
                    .HasColumnType("datetime");

                entity.Property(e => e.Datetimeoffset5Column)
                    .HasColumnName("datetimeoffset5Column")
                    .HasColumnType("datetimeoffset(5)");

                entity.Property(e => e.DatetimeoffsetColumn).HasColumnName("datetimeoffsetColumn");

                entity.Property(e => e.DecimalColumn)
                    .HasColumnName("decimalColumn")
                    .HasColumnType("decimal");

                entity.Property(e => e.FloatColumn).HasColumnName("floatColumn");

                entity.Property(e => e.ImageColumn)
                    .HasColumnName("imageColumn")
                    .HasColumnType("image");

                entity.Property(e => e.IntColumn).HasColumnName("intColumn");

                entity.Property(e => e.MoneyColumn)
                    .HasColumnName("moneyColumn")
                    .HasColumnType("money");

                entity.Property(e => e.NationalCharVarying177Column)
                    .HasColumnName("nationalCharVarying177Column")
                    .HasMaxLength(177);

                entity.Property(e => e.NationalCharVaryingColumn)
                    .HasColumnName("nationalCharVaryingColumn")
                    .HasMaxLength(1);

                entity.Property(e => e.NationalCharVaryingMaxColumn).HasColumnName("nationalCharVaryingMaxColumn");

                entity.Property(e => e.NationalCharacter171Column)
                    .HasColumnName("nationalCharacter171Column")
                    .HasColumnType("nchar(171)");

                entity.Property(e => e.NationalCharacterColumn)
                    .HasColumnName("nationalCharacterColumn")
                    .HasColumnType("nchar(1)");

                entity.Property(e => e.NationalCharacterVarying188Column)
                    .HasColumnName("nationalCharacterVarying188Column")
                    .HasMaxLength(188);

                entity.Property(e => e.NationalCharacterVaryingColumn)
                    .HasColumnName("nationalCharacterVaryingColumn")
                    .HasMaxLength(1);

                entity.Property(e => e.NationalCharacterVaryingMaxColumn).HasColumnName("nationalCharacterVaryingMaxColumn");

                entity.Property(e => e.Nchar99Column)
                    .HasColumnName("nchar99Column")
                    .HasColumnType("nchar(99)");

                entity.Property(e => e.NcharColumn)
                    .HasColumnName("ncharColumn")
                    .HasColumnType("nchar(1)");

                entity.Property(e => e.NtextColumn)
                    .HasColumnName("ntextColumn")
                    .HasColumnType("ntext");

                entity.Property(e => e.NumericColumn)
                    .HasColumnName("numericColumn")
                    .HasColumnType("numeric");

                entity.Property(e => e.Nvarchar100Column)
                    .HasColumnName("nvarchar100Column")
                    .HasMaxLength(100);

                entity.Property(e => e.NvarcharColumn)
                    .HasColumnName("nvarcharColumn")
                    .HasMaxLength(1);

                entity.Property(e => e.NvarcharMaxColumn).HasColumnName("nvarcharMaxColumn");

                entity.Property(e => e.RealColumn).HasColumnName("realColumn");

                entity.Property(e => e.SmalldatetimeColumn)
                    .HasColumnName("smalldatetimeColumn")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.SmallintColumn).HasColumnName("smallintColumn");

                entity.Property(e => e.SmallmoneyColumn)
                    .HasColumnName("smallmoneyColumn")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TextColumn)
                    .HasColumnName("textColumn")
                    .HasColumnType("text");

                entity.Property(e => e.Time4Column)
                    .HasColumnName("time4Column")
                    .HasColumnType("time(4)");

                entity.Property(e => e.TimeColumn).HasColumnName("timeColumn");

                entity.Property(e => e.TimestampColumn)
                    .HasColumnName("timestampColumn")
                    .HasColumnType("timestamp")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.TinyintColumn).HasColumnName("tinyintColumn");

                entity.Property(e => e.TypeAliasColumn)
                    .HasColumnName("typeAliasColumn")
                    .HasColumnType("TestTypeAlias");

                entity.Property(e => e.UniqueidentifierColumn).HasColumnName("uniqueidentifierColumn");

                entity.Property(e => e.Varbinary123Column)
                    .HasColumnName("varbinary123Column")
                    .HasMaxLength(123);

                entity.Property(e => e.VarbinaryColumn)
                    .HasColumnName("varbinaryColumn")
                    .HasMaxLength(1);

                entity.Property(e => e.VarbinaryMaxColumn).HasColumnName("varbinaryMaxColumn");

                entity.Property(e => e.Varchar66Column)
                    .HasColumnName("varchar66Column")
                    .HasColumnType("varchar(66)");

                entity.Property(e => e.VarcharColumn)
                    .HasColumnName("varcharColumn")
                    .HasColumnType("varchar(1)");

                entity.Property(e => e.VarcharMaxColumn)
                    .HasColumnName("varcharMaxColumn")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.XmlColumn)
                    .HasColumnName("xmlColumn")
                    .HasColumnType("xml");
            });

            modelBuilder.Entity<MultipleFKsDependent>(entity =>
            {
                entity.Property(e => e.MultipleFKsDependentId).ValueGeneratedNever();

                entity.Property(e => e.AnotherColumn)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.RelationA)
                    .WithMany(p => p.MultipleFKsDependentRelationA)
                    .HasForeignKey(d => d.RelationAId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_RelationA");

                entity.HasOne(d => d.RelationB)
                    .WithMany(p => p.MultipleFKsDependentRelationB)
                    .HasForeignKey(d => d.RelationBId)
                    .HasConstraintName("FK_RelationB");

                entity.HasOne(d => d.RelationC)
                    .WithMany(p => p.MultipleFKsDependentRelationC)
                    .HasForeignKey(d => d.RelationCId)
                    .HasConstraintName("FK_RelationC");
            });

            modelBuilder.Entity<MultipleFKsPrincipal>(entity =>
            {
                entity.Property(e => e.MultipleFKsPrincipalId).ValueGeneratedNever();

                entity.Property(e => e.SomePrincipalColumn)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<OneToManyDependent>(entity =>
            {
                entity.HasKey(e => new { e.OneToManyDependentID1, e.OneToManyDependentID2 })
                    .HasName("PK_OneToManyDependent");

                entity.Property(e => e.SomeDependentEndColumn)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.OneToManyDependentFK)
                    .WithMany(p => p.OneToManyDependent)
                    .HasForeignKey(d => new { d.OneToManyDependentFK1, d.OneToManyDependentFK2 })
                    .HasConstraintName("FK_OneToManyDependent");
            });

            modelBuilder.Entity<OneToManyPrincipal>(entity =>
            {
                entity.HasKey(e => new { e.OneToManyPrincipalID1, e.OneToManyPrincipalID2 })
                    .HasName("PK_OneToManyPrincipal");

                entity.Property(e => e.Other)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<OneToOneDependent>(entity =>
            {
                entity.HasKey(e => new { e.OneToOneDependentID1, e.OneToOneDependentID2 })
                    .HasName("PK_OneToOneDependent");

                entity.Property(e => e.SomeDependentEndColumn)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.OneToOneDependentNavigation)
                    .WithOne(p => p.OneToOneDependent)
                    .HasForeignKey<OneToOneDependent>(d => new { d.OneToOneDependentID1, d.OneToOneDependentID2 })
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_OneToOneDependent");
            });

            modelBuilder.Entity<OneToOneFKToUniqueKeyDependent>(entity =>
            {
                entity.HasKey(e => new { e.OneToOneFKToUniqueKeyDependentID1, e.OneToOneFKToUniqueKeyDependentID2 })
                    .HasName("PK_OneToOneFKToUniqueKeyDependent");

                entity.HasIndex(e => new { e.OneToOneFKToUniqueKeyDependentFK1, e.OneToOneFKToUniqueKeyDependentFK2 })
                    .HasName("UK_OneToOneFKToUniqueKeyDependent")
                    .IsUnique();

                entity.Property(e => e.OneToOneFKToUniqueKeyDependentFK1).IsRequired();

                entity.Property(e => e.OneToOneFKToUniqueKeyDependentFK2).IsRequired();

                entity.Property(e => e.SomeColumn)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.OneToOneFKToUniqueKeyDependentFK)
                    .WithOne(p => p.OneToOneFKToUniqueKeyDependent)
                    .HasPrincipalKey<OneToOneFKToUniqueKeyPrincipal>(p => new { p.OneToOneFKToUniqueKeyPrincipalUniqueKey1, p.OneToOneFKToUniqueKeyPrincipalUniqueKey2 })
                    .HasForeignKey<OneToOneFKToUniqueKeyDependent>(d => new { d.OneToOneFKToUniqueKeyDependentFK1, d.OneToOneFKToUniqueKeyDependentFK2 })
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_OneToOneFKToUniqueKeyDependent");
            });

            modelBuilder.Entity<OneToOneFKToUniqueKeyPrincipal>(entity =>
            {
                entity.HasKey(e => new { e.OneToOneFKToUniqueKeyPrincipalID1, e.OneToOneFKToUniqueKeyPrincipalID2 })
                    .HasName("PK_OneToOneFKToUniqueKeyPrincipal");

                entity.HasIndex(e => new { e.OneToOneFKToUniqueKeyPrincipalUniqueKey1, e.OneToOneFKToUniqueKeyPrincipalUniqueKey2 })
                    .HasName("UK_OneToOneFKToUniqueKeyPrincipal")
                    .IsUnique();

                entity.Property(e => e.SomePrincipalColumn)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<OneToOnePrincipal>(entity =>
            {
                entity.HasKey(e => new { e.OneToOnePrincipalID1, e.OneToOnePrincipalID2 })
                    .HasName("PK_OneToOnePrincipal");

                entity.Property(e => e.SomeOneToOnePrincipalColumn)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<OneToOneSeparateFKDependent>(entity =>
            {
                entity.HasKey(e => new { e.OneToOneSeparateFKDependentID1, e.OneToOneSeparateFKDependentID2 })
                    .HasName("PK_OneToOneSeparateFKDependent");

                entity.HasIndex(e => new { e.OneToOneSeparateFKDependentFK1, e.OneToOneSeparateFKDependentFK2 })
                    .HasName("UK_OneToOneSeparateFKDependent")
                    .IsUnique();

                entity.Property(e => e.OneToOneSeparateFKDependentFK1).IsRequired();

                entity.Property(e => e.OneToOneSeparateFKDependentFK2).IsRequired();

                entity.Property(e => e.SomeDependentEndColumn)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.OneToOneSeparateFKDependentFK)
                    .WithOne(p => p.OneToOneSeparateFKDependent)
                    .HasForeignKey<OneToOneSeparateFKDependent>(d => new { d.OneToOneSeparateFKDependentFK1, d.OneToOneSeparateFKDependentFK2 })
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_OneToOneSeparateFKDependent");
            });

            modelBuilder.Entity<OneToOneSeparateFKPrincipal>(entity =>
            {
                entity.HasKey(e => new { e.OneToOneSeparateFKPrincipalID1, e.OneToOneSeparateFKPrincipalID2 })
                    .HasName("PK_OneToOneSeparateFKPrincipal");

                entity.Property(e => e.SomeOneToOneSeparateFKPrincipalColumn)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<PropertyConfiguration>(entity =>
            {
                entity.HasIndex(e => new { e.A, e.B })
                    .HasName("Test_PropertyConfiguration_Index");

                entity.Property(e => e.ComputedDateTimeColumn)
                    .HasColumnType("datetime")
                    .HasComputedColumnSql("getdate()")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.PropertyConfiguration1).HasColumnName("PropertyConfiguration");

                entity.Property(e => e.RowversionColumn)
                    .IsRequired()
                    .HasColumnType("timestamp")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.SumOfAAndB)
                    .HasComputedColumnSql("[A]+[B]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.WithDateDefaultExpression).HasDefaultValueSql("getdate()");

                entity.Property(e => e.WithDateFixedDefault).HasDefaultValueSql("'October 20, 2015 11am'");

                entity.Property(e => e.WithDefaultValue).HasDefaultValueSql("-1");

                entity.Property(e => e.WithGuidDefaultExpression).HasDefaultValueSql("newsequentialid()");

                entity.Property(e => e.WithMoneyDefaultValue)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0.00");

                entity.Property(e => e.WithVarcharNullDefaultValue).HasColumnType("varchar(1)");
            });

            modelBuilder.Entity<SelfReferencing>(entity =>
            {
                entity.Property(e => e.SelfReferencingID).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.SelfReferenceFKNavigation)
                    .WithMany(p => p.InverseSelfReferenceFKNavigation)
                    .HasForeignKey(d => d.SelfReferenceFK)
                    .HasConstraintName("FK_SelfReferencing");
            });

            modelBuilder.Entity<Test_Spaces_Keywords_Table>(entity =>
            {
                entity.ToTable("Test Spaces Keywords Table");

                entity.Property(e => e.Test_Spaces_Keywords_TableID)
                    .HasColumnName("Test Spaces Keywords TableID")
                    .ValueGeneratedNever();

                entity.Property(e => e.@Multiple_At_Symbols_In_Column).HasColumnName("@Multiple@At@Symbols@In@Column");

                entity.Property(e => e.Abstract).HasColumnName("abstract");

                entity.Property(e => e.Class).HasColumnName("class");

                entity.Property(e => e.Commas_In_Column).HasColumnName("Commas,In,Column");

                entity.Property(e => e.Spaces_In_Column).HasColumnName("Spaces In Column");

                entity.Property(e => e.Tabs_In_Column).HasColumnName("Tabs\tIn\tColumn");

                entity.Property(e => e.Volatile).HasColumnName("volatile");

                entity.Property(e => e._Backslashes_In_Column).HasColumnName("\\Backslashes\\In\\Column");

                entity.Property(e => e._Dollar_Sign_Column).HasColumnName("$Dollar$Sign$Column");

                entity.Property(e => e._Double_Quotes_Column).HasColumnName("\"Double\"Quotes\"Column");

                entity.Property(e => e._Exclamation_Mark_Column).HasColumnName("!Exclamation!Mark!Column");
            });

            modelBuilder.Entity<UnmappablePKColumn>(entity =>
            {
                entity.Property(e => e.UnmappablePKColumnID).ValueGeneratedNever();

                entity.Property(e => e.AColumn)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.ValueGeneratedOnAddColumn).ValueGeneratedOnAdd();
            });
        }

        public virtual DbSet<AllDataTypes> AllDataTypes { get; set; }
        public virtual DbSet<MultipleFKsDependent> MultipleFKsDependent { get; set; }
        public virtual DbSet<MultipleFKsPrincipal> MultipleFKsPrincipal { get; set; }
        public virtual DbSet<OneToManyDependent> OneToManyDependent { get; set; }
        public virtual DbSet<OneToManyPrincipal> OneToManyPrincipal { get; set; }
        public virtual DbSet<OneToOneDependent> OneToOneDependent { get; set; }
        public virtual DbSet<OneToOneFKToUniqueKeyDependent> OneToOneFKToUniqueKeyDependent { get; set; }
        public virtual DbSet<OneToOneFKToUniqueKeyPrincipal> OneToOneFKToUniqueKeyPrincipal { get; set; }
        public virtual DbSet<OneToOnePrincipal> OneToOnePrincipal { get; set; }
        public virtual DbSet<OneToOneSeparateFKDependent> OneToOneSeparateFKDependent { get; set; }
        public virtual DbSet<OneToOneSeparateFKPrincipal> OneToOneSeparateFKPrincipal { get; set; }
        public virtual DbSet<PropertyConfiguration> PropertyConfiguration { get; set; }
        public virtual DbSet<SelfReferencing> SelfReferencing { get; set; }
        public virtual DbSet<Test_Spaces_Keywords_Table> Test_Spaces_Keywords_Table { get; set; }
        public virtual DbSet<UnmappablePKColumn> UnmappablePKColumn { get; set; }

        // Unable to generate entity type for table 'dbo.TableWithUnmappablePrimaryKeyColumn'. Please see the warning messages.
    }
}