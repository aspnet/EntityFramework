use namespace="System.IO"
use import="Json"

default BASE_DIR='${Directory.GetCurrentDirectory()}'
default TARGET_DIR='${Path.Combine(BASE_DIR, "artifacts")}'
default BUILD_DIR='${Path.Combine(TARGET_DIR, "build")}'
default NUGET_EXE_PATH='${E("KOREBUILD_NUGET_EXE")}'

var VERSION='0.1'
var FULL_VERSION='0.1'
var AUTHORS='Microsoft Open Technologies, Inc.'
-BuildQuality = '';
use-standard-lifecycle
k-standard-goals

functions @{
  static string GetLockFileVersion(JsonObject lockFile, string libName) {
    if (lockFile.Keys.Contains("libraries"))
    {
        foreach(var libKey in lockFile.ValueAsJsonObject("libraries").Keys)
        {
          if (libKey.StartsWith(libName + "/"))
          {
            return libKey.Split(new[] { "/" }, StringSplitOptions.None)[1];
          }
      }
    }
    return null;
  }
}

#csproj-initialize target='initialize' if='(!IsMono && !IsTeamCity && E("APPVEYOR") == null) || E("IsEFPerfBuild") != null'
  var programFilesX86='${Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86)}'
  var buildProgram='${Path.Combine(programFilesX86, "MSBuild", "14.0", "Bin", "MSBuild.exe")}'
  for each='var projectFile in Files.Include("src/**/*.csproj").Include("test/**/*.csproj")'
    exec program='${buildProgram}' commandline='${projectFile} /t:GenerateProjectLockTargets /v:m /nologo /p:Configuration=${E("Configuration")}'

#publish-efci-artifacts target="test-compile" if='IsTeamCity'
  @{
    // produce .NET Core test artifacts for testing
    var testProjects = Files.Include("test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/project.json")
    .Include("test/Microsoft.EntityFrameworkCore.SqlServer.Design.FunctionalTests/project.json");
    var tfm = "netcoreapp1.0";
    foreach (var projectFile in testProjects)
    {
      var projectName = Path.GetFileName(Path.GetDirectoryName(projectFile));
      var output = Path.Combine(Directory.GetCurrentDirectory(), "artifacts/tests", projectName, tfm);
      Dotnet(string.Format("publish --configuration Release --output {0} --framework {1} {2}", output, tfm, projectFile));
    }
  }

#update-nuget
  @{
    if(!string.IsNullOrEmpty(NUGET_EXE_PATH)) {
      return;
    }
    NUGET_EXE_PATH = Path.Combine(BASE_DIR,".build", "nuget.3.5.0-beta2.exe");
    var wc = new WebClient();
    wc.DownloadFile("https://dist.nuget.org/win-x86-commandline/v3.5.0-beta2/NuGet.exe", NUGET_EXE_PATH);
    Log.Info("Downloaded nuget 3.5.0-beta");
  }

#remove-intermediates
  @{
    Directory.CreateDirectory(BUILD_DIR);
    foreach (var p in Files
      .Include(Path.Combine(BUILD_DIR, "**\\dotnet-ef.*.nupkg"))
      .Include(Path.Combine(BUILD_DIR, "**\\Microsoft.EntityFrameworkCore.Design.*.nupkg"))
      .Include(Path.Combine(BUILD_DIR, "**\\Microsoft.EntityFrameworkCore.Tools.*.nupkg"))
      )
    {
      Log.Info("Deleting " + p);
      File.Delete(p);
    }
  }

#pack-tools .remove-intermediates .update-nuget target='package' if='Directory.Exists("src")'
  @{
    var lockFile = (JsonObject)Json.Deserialize(File.ReadAllText("src/dotnet-ef/project.lock.json"));

    var props="configuration=" + E("Configuration");
    props+=";dotnetcliutils=" + GetLockFileVersion(lockFile, "Microsoft.DotNet.Cli.Utils");
    props+=";projectmodel=" + GetLockFileVersion(lockFile, "Microsoft.DotNet.ProjectModel");
    props+=";cliutils=" + GetLockFileVersion(lockFile, "Microsoft.Extensions.CommandLineUtils");
    props+=";netcoreapp=" + GetLockFileVersion(lockFile, "Microsoft.NETCore.App");

    ExecClr(NUGET_EXE_PATH, "pack src/Microsoft.EntityFrameworkCore.Tools.nuspec -Verbosity detailed" +
      " -OutputDirectory " + BUILD_DIR + 
      " -Version 1.0.0-preview3-" + E("DOTNET_BUILD_VERSION") + 
      " -Properties \"" + props + "\"");
  }

#rebuild-inside-man if='Directory.Exists("src")'
  @{
      var configurationX86 = E("Configuration").ToLower() + "_x86";
      DotnetBuild("src/Microsoft.EntityFrameworkCore.Design/", configurationX86, "net451");
  }

#pack-design .remove-intermediates .update-nuget .rebuild-inside-man target='package' if='Directory.Exists("src")'
  @{
    foreach (var p in Files
      .Include(Path.Combine(BUILD_DIR, "**\\Microsoft.EntityFrameworkCore.Design.*.nupkg"))
      )
    {
      Log.Info("Deleting " + p);
      File.Delete(p);
    }

    var lockFile = (JsonObject)Json.Deserialize(File.ReadAllText("src/Microsoft.EntityFrameworkCore.Design/project.lock.json"));

    var props="configuration=" + E("Configuration");
    props+=";cliutils=" + GetLockFileVersion(lockFile, "Microsoft.Extensions.CommandLineUtils");
    props+=";netcoreapp=" + GetLockFileVersion(lockFile, "Microsoft.NETCore.App");

    ExecClr(NUGET_EXE_PATH, "pack src/Microsoft.EntityFrameworkCore.Design.nuspec -Verbosity detailed" +
      " -OutputDirectory " + BUILD_DIR + 
      " -Version 1.0.0-preview3-" + E("DOTNET_BUILD_VERSION") + 
      " -Properties \"" + props + "\"");
  }