use namespace="System.IO"
use namespace="System.IO.Compression"
use namespace="System.Linq"

default CONFIGURATION_LOCAL='${E("Configuration")}'
default BASE_DIR_LOCAL='${Directory.GetCurrentDirectory()}'
default BUILD_DIR_LOCAL='${Path.Combine(BASE_DIR_LOCAL, "artifacts", "build")}'
default TOOL_PACKAGE_NAME='Microsoft.EntityFrameworkCore.Tools'
default CLI_TOOL_PROJECT_NAME='Microsoft.EntityFrameworkCore.Tools.Cli'
default TOOL_EXE_NAME='${CLI_TOOL_PROJECT_NAME}.exe'

var VERSION='0.1'
var FULL_VERSION='0.1'
var AUTHORS='Microsoft Open Technologies, Inc.'
-BuildQuality = '';
use-standard-lifecycle
k-standard-goals

#csproj-initialize target='initialize' if='(!IsMono && !IsTeamCity && E("APPVEYOR") == null) || E("IsEFPerfBuild") != null'
  var programFilesX86='${Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86)}'
  var buildProgram='${Path.Combine(programFilesX86, "MSBuild", "14.0", "Bin", "MSBuild.exe")}'
  for each='var projectFile in Files.Include("src/**/*.csproj").Include("test/**/*.csproj")'
    exec program='${buildProgram}' commandline='${projectFile} /t:GenerateProjectLockTargets /v:m /nologo /p:Configuration=${E("Configuration")}'

#publish-efci-artifacts target="test-compile" if='IsTeamCity'
  @{
    // produce .NET Core test artifacts for testing
    var testProjects = Files.Include("test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/project.json")
    .Include("test/Microsoft.EntityFrameworkCore.SqlServer.Design.FunctionalTests/project.json");
    var tfm = "netcoreapp1.0";
    foreach (var projectFile in testProjects)
    {
      var projectName = Path.GetFileName(Path.GetDirectoryName(projectFile));
      var output = Path.Combine(Directory.GetCurrentDirectory(), "artifacts/tests", projectName, tfm);
      Dotnet(string.Format("publish --configuration Release --output {0} --framework {1} {2}", output, tfm, projectFile));
    }
  }

#repack-tools target='compile'
  @{
      // copies the net451 target for UWP, minus the dependency on CLI tooling
      var projectNupkg = Files
        .Include(Path.Combine(BUILD_DIR_LOCAL, TOOL_PACKAGE_NAME + ".1.*.nupkg")) // Assuming the package version starts with 1.
        .Where(path => !path.EndsWith(".symbols.nupkg", StringComparison.OrdinalIgnoreCase))
        .OrderByDescending(f => f)    // On local builds multiple nupkgs are generated.
        .First();
      
      Log.Info("Repacking Nupkg: " + projectNupkg);

       var extractToDirectory = projectNupkg + "-temp";
      ZipFile.ExtractToDirectory(projectNupkg, extractToDirectory);

      var nuspecFile = Files.Include(Path.Combine(extractToDirectory, "*.nuspec")).First();
      var nuspec = new List<string>(File.ReadAllLines(nuspecFile));
      var dependencies = Array.FindIndex<string>(nuspec.ToArray(), l => l.Contains("<dependencies>")) + 1;

      var uap = nuspec.SkipWhile(l => !l.Contains("<group targetFramework=\".NETFramework4.5.1"))
            .TakeWhile(l => !l.Contains("</group>"))
            .Where(l => !l.Contains(CLI_TOOL_PROJECT_NAME))
            .ToList();

      uap[0] = uap[0].Replace(".NETFramework4.5.1", ".NETCore5.0");
      uap.Add("      </group>");

      nuspec.InsertRange(dependencies, uap);

      File.WriteAllLines(nuspecFile, nuspec);

      // repack
      var nugetExePath = Path.Combine(BASE_DIR_LOCAL, ".build", "nuget.exe");
      var nuspecPath = Path.Combine(extractToDirectory, TOOL_PACKAGE_NAME + ".nuspec");
      ExecClr(nugetExePath, "pack " + nuspecPath + " -OutputDirectory " + BUILD_DIR_LOCAL);
      
      try
      {
          // Delete temporary directory we used to repack.
          Directory.Delete(extractToDirectory, true);
      }
      catch
      {
          // Don't care if we couldn't delete the temp directory.
      }
  }